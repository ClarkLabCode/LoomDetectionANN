%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Looming detection -3.pdf)
%%Creator: (Adobe Acrobat 21.1.0)
%%For: bhzhou01
%%CreationDate: 3/2/21, 12:05 PM
%%BoundingBox: 0 0 342 183
%%HiResBoundingBox: 0 0 341.0713 182.4732
%%CropBox: 0 0 341.0713 182.4732
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 566 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-03-02T17:48:05Z"
   xmp:ModifyDate="2021-03-02T17:48:05Z"
   pdf:Producer="iOS Version 14.4 (Build 18D52) Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -182.473 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 182.473 li
341.071 182.473 li
341.071 0 li
cp
clp
92.8741 91.0713 mo
93.3928 135.33 109.309 181.419 170.736 173.773 cv
208.646 169.054 208.318 143.647 217.558 100.99 cv
232.501 31.9994 221.232 20.7957 165.743 10.0664 cv
128.275 2.82104 92.3554 46.8116 92.8741 91.0713 cv
cp
false sop
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 .5 cmyk
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
44.1363 103.915 mo
48.2565 133.691 67.9096 188.378 105.211 178.046 cv
114.873 175.37 92.5029 143.562 83.9373 96.7964 cv
79.3067 71.5101 94.1466 21.3391 30.2601 37.9198 cv
9.36635 43.341 40.6148 78.4609 44.1363 103.915 cv
cp
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
201.012 45.2763 mo
201.012 45.2763 189.216 88.4592 187.257 96.3976 cv
185.3 104.336 178.635 147.952 178.635 147.952 cv
0 0 0 .3 cmyk
1 lw
[3 3 ] 0 dsh
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
174.644 26.2903 mo
174.644 26.2903 157.795 75.9638 155.996 97.2592 cv
154.196 118.554 148.691 129.997 150.494 152.734 cv
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
151.033 23.5975 mo
146.96 26.1204 126.252 52.5847 121.906 75.394 cv
117.558 98.2034 112.649 116.567 120.214 149.626 cv
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
142.877 21.0103 mo
138.233 25.937 119.479 43.8689 112.267 81.2207 cv
106.446 111.37 108.918 126.72 114.444 145.05 cv
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
119.895 36.827 mo
119.895 36.827 110.103 51.2906 105.168 73.6118 cv
100.232 95.9341 104.691 106.767 103.905 113.702 cv
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
45.16 37.3112 mo
47.5387 41.2836 61.1051 71.6265 66.9344 104.811 cv
72.7636 137.995 86.3194 167.339 100.413 176.174 cv
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
31.4556 39.472 mo
33.8333 43.4444 50.4948 72.5009 56.324 105.686 cv
62.1532 138.869 75.709 168.213 89.8014 177.049 cv
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
62.791 38.6047 mo
65.1696 42.5771 70.6715 70.0143 76.5008 103.199 cv
82.33 136.383 95.8506 162.727 104.807 175.373 cv
gsave
[.999924 -.0117188 -.0117188 -.999924 -221.077 371.845 ]ct
@
grestore newpath
50.3375 107.39 mo
51.2526 107.06 52.1068 106.554 52.9186 106.023 cv
53.7205 105.5 53.9459 104.424 53.4225 103.622 cv
52.9062 102.831 51.8514 102.599 51.0502 103.1 cv
50.0098 103.75 49.0071 104.72 48.7216 105.957 cv
48.5693 106.618 48.9821 107.279 49.6439 107.431 cv
49.8745 107.484 50.1154 107.469 50.3375 107.39 cv
cp
52.9186 106.023 mo
54.0371 105.293 55.2055 104.637 56.377 103.994 cv
57.1968 103.544 57.4958 102.516 57.0461 101.697 cv
56.6037 100.89 55.597 100.585 54.7809 101.01 cv
53.5176 101.668 52.2584 102.344 51.0502 103.1 cv
50.2371 103.608 49.9907 104.679 50.4992 105.491 cv
51.0067 106.303 52.0777 106.55 52.8898 106.042 cv
52.8997 106.036 52.9087 106.03 52.9186 106.023 cv
cp
56.377 103.994 mo
57.5187 103.367 58.6615 102.741 59.8114 102.128 cv
60.5876 101.715 60.8823 100.751 60.4682 99.9746 cv
60.0857 99.2561 59.223 98.9422 58.4685 99.246 cv
57.2054 99.7549 55.9877 100.381 54.7809 101.01 cv
53.952 101.442 53.6309 102.464 54.0627 103.293 cv
54.4944 104.121 55.5162 104.443 56.3452 104.011 cv
56.3561 104.005 56.3661 104 56.377 103.994 cv
cp
59.8114 102.128 mo
60.5299 101.746 61.2423 101.348 61.9282 100.91 cv
62.632 100.46 62.838 99.5258 62.3898 98.8221 cv
61.9456 98.1272 61.0271 97.916 60.3241 98.3482 cv
59.7383 98.7081 59.1046 98.9896 58.4685 99.246 cv
57.6523 99.5746 57.2571 100.502 57.5858 101.319 cv
57.9143 102.134 58.842 102.529 59.6582 102.2 cv
59.7109 102.179 59.7617 102.155 59.8114 102.128 cv
cp
61.9282 100.91 mo
62.5506 100.513 63.171 100.114 63.7913 99.7147 cv
64.5 99.2593 64.705 98.3159 64.2487 97.6072 cv
63.7923 96.8995 62.8489 96.6945 62.1412 97.1499 cv
62.1253 97.1601 62.1104 97.1702 62.0955 97.1804 cv
61.5152 97.5842 60.9268 97.9781 60.3241 98.3482 cv
59.6132 98.7846 59.3911 99.7152 59.8274 100.427 cv
60.2648 101.138 61.1954 101.36 61.9064 100.924 cv
61.9133 100.919 61.9213 100.915 61.9282 100.91 cv
cp
63.7913 99.7147 mo
64.4037 99.3205 65.0375 98.959 65.6939 98.6433 cv
66.4636 98.2733 66.7868 97.3494 66.4178 96.5807 cv
66.0477 95.813 65.1269 95.4888 64.3581 95.8558 cv
63.5685 96.2331 62.8147 96.6809 62.0955 97.1804 cv
61.4041 97.6605 61.2332 98.6116 61.7134 99.303 cv
62.1823 99.9776 63.1015 100.16 63.7913 99.7147 cv
cp
65.6939 98.6433 mo
66.3363 98.3348 66.9931 98.054 67.6602 97.8022 cv
68.4567 97.5029 68.8593 96.6141 68.5599 95.8176 cv
68.2606 95.023 67.3768 94.6194 66.5812 94.9147 cv
65.8265 95.1945 65.0841 95.5083 64.3581 95.8558 cv
63.5874 96.2238 63.2622 97.1467 63.6292 97.9165 cv
63.9973 98.6862 64.9202 99.0124 65.6909 98.6443 cv
65.6919 98.6443 65.6929 98.6433 65.6939 98.6433 cv
cp
67.6602 97.8022 mo
68.384 97.5307 69.1212 97.2921 69.8648 97.0773 cv
70.6821 96.8418 71.1531 95.9882 70.9165 95.1709 cv
70.6809 94.3546 69.8274 93.8836 69.0111 94.1192 cv
69.0101 94.1192 69.0101 94.1202 69.0091 94.1202 cv
68.1908 94.3568 67.3798 94.6183 66.5812 94.9147 cv
65.7827 95.2111 65.376 96.0979 65.6714 96.8965 cv
65.9678 97.6941 66.8546 98.1017 67.6532 97.8053 cv
67.6552 97.8043 67.6572 97.8033 67.6602 97.8022 cv
cp
69.8648 97.0773 mo
70.6581 96.848 71.4453 96.5978 72.2179 96.3067 cv
73.0154 96.0074 73.4181 95.1186 73.1187 94.321 cv
72.8183 93.5245 71.9296 93.1219 71.133 93.4213 cv
71.132 93.4213 71.13 93.4223 71.129 93.4223 cv
70.4331 93.6865 69.7237 93.9128 69.0091 94.1202 cv
68.1928 94.3568 67.7228 95.2103 67.9594 96.0276 cv
68.196 96.8429 69.0485 97.3129 69.8648 97.0773 cv
cp
72.2179 96.3067 mo
73.1658 95.9506 74.1456 95.6721 75.1184 95.3937 cv
75.9397 95.1581 76.4146 94.3014 76.179 93.4801 cv
75.9444 92.6588 75.0878 92.1848 74.2665 92.4195 cv
74.2655 92.4195 74.2635 92.4205 74.2615 92.4205 cv
73.21 92.7259 72.1535 93.0343 71.129 93.4223 cv
70.3335 93.7246 69.9319 94.6144 70.2343 95.4109 cv
70.5356 96.2054 71.4224 96.6061 72.2179 96.3067 cv
cp
75.1184 95.3937 mo
76.6942 94.9422 78.2668 94.4777 79.8374 94.0083 cv
80.6586 93.7627 81.1255 92.8971 80.8788 92.076 cv
80.6332 91.2548 79.7687 90.7879 78.9475 91.0335 cv
78.9465 91.0335 78.9465 91.0345 78.9455 91.0346 cv
77.3859 91.5029 75.8253 91.9672 74.2615 92.4205 cv
73.4412 92.6592 72.9692 93.5168 73.2069 94.337 cv
73.4445 95.1563 74.2991 95.6283 75.1184 95.3937 cv
cp
79.8374 94.0083 mo
81.3731 93.5483 82.9099 93.0912 84.4487 92.6412 cv
85.2799 92.3984 85.7567 91.5278 85.514 90.6966 cv
85.2702 89.8654 84.3996 89.3896 83.5684 89.6323 cv
83.5614 89.6344 83.5554 89.6364 83.5484 89.6385 cv
82.0159 90.1095 80.4812 90.5735 78.9455 91.0346 cv
78.1244 91.2812 77.6595 92.1467 77.9061 92.9669 cv
78.1517 93.788 79.0163 94.2539 79.8374 94.0083 cv
cp
84.4487 92.6412 mo
85.9995 92.188 87.5586 91.7617 89.1188 91.3454 cv
89.9692 91.1184 90.474 90.2444 90.247 89.395 cv
90.02 88.5446 89.1471 88.0398 88.2967 88.2668 cv
88.2927 88.2679 88.2887 88.2689 88.2847 88.27 cv
86.7007 88.7065 85.1189 89.1551 83.5484 89.6385 cv
82.7204 89.8922 82.2556 90.7697 82.5103 91.5978 cv
82.762 92.4169 83.6255 92.8818 84.4487 92.6412 cv
cp
89.1188 91.3454 mo
90.8754 90.8757 92.633 90.4081 94.3907 89.9425 cv
95.251 89.7144 95.7637 88.8313 95.5356 87.9709 cv
95.3075 87.1106 94.4255 86.5979 93.5651 86.826 cv
93.5621 86.827 93.5591 86.828 93.5561 86.8281 cv
91.7976 87.3047 90.0411 87.7863 88.2847 88.27 cv
87.4364 88.5039 86.9386 89.3808 87.1726 90.2291 cv
87.4045 91.0724 88.2734 91.5713 89.1188 91.3454 cv
cp
94.3907 89.9425 mo
95.8462 89.5564 97.3122 89.2032 98.792 88.9249 cv
99.6731 88.7595 100.254 87.9106 100.088 87.0286 cv
99.9225 86.1474 99.0737 85.5674 98.1916 85.7327 cv
98.1896 85.7327 98.1866 85.7338 98.1846 85.7338 cv
96.627 86.035 95.0864 86.4141 93.5561 86.8281 cv
92.6968 87.0612 92.1891 87.9472 92.4222 88.8055 cv
92.6543 89.6618 93.5333 90.1696 94.3907 89.9425 cv
cp
98.792 88.9249 mo
100.176 88.6646 101.558 88.3954 102.939 88.1202 cv
103.825 87.9428 104.4 87.081 104.222 86.195 cv
104.046 85.3081 103.183 84.7331 102.297 84.9105 cv
102.293 84.9116 102.289 84.9116 102.286 84.9127 cv
100.92 85.1957 99.5536 85.4697 98.1846 85.7338 cv
97.3035 85.9041 96.7275 86.7559 96.8968 87.636 cv
97.0671 88.514 97.9139 89.0901 98.792 88.9249 cv
cp
102.939 88.1202 mo
104.609 87.7866 106.291 87.5099 107.974 87.2521 cv
108.873 87.1156 109.491 86.2753 109.354 85.3759 cv
109.217 84.4774 108.376 83.8592 107.477 83.9968 cv
107.476 83.9968 107.476 83.9968 107.475 83.9968 cv
105.739 84.2652 104.006 84.5565 102.286 84.9127 cv
101.401 85.096 100.832 85.9618 101.016 86.8466 cv
101.198 87.7276 102.057 88.2965 102.939 88.1202 cv
cp
107.974 87.2521 mo
109.903 86.9585 111.828 86.644 113.749 86.3044 cv
114.654 86.1448 115.258 85.2816 115.099 84.3765 cv
114.939 83.4723 114.076 82.8674 113.171 83.027 cv
113.165 83.028 113.16 83.0291 113.154 83.0302 cv
111.266 83.3833 109.372 83.7036 107.475 83.9968 cv
106.575 84.1353 105.959 84.9766 106.098 85.876 cv
106.236 86.7735 107.077 87.3897 107.974 87.2521 cv
cp
113.749 86.3044 mo
115.412 86.0119 117.07 85.6964 118.72 85.3361 cv
119.628 85.1375 120.203 84.2406 120.005 83.3319 cv
119.806 82.4242 118.908 81.8487 118.001 82.0473 cv
117.999 82.0483 117.997 82.0484 117.994 82.0494 cv
116.387 82.4073 114.772 82.7272 113.154 83.0302 cv
112.251 83.1998 111.655 84.0688 111.824 84.9719 cv
111.992 85.869 112.851 86.463 113.749 86.3044 cv
cp
118.72 85.3361 mo
119.99 85.0582 121.264 84.7982 122.544 84.5742 cv
123.466 84.4124 124.082 83.5341 123.921 82.612 cv
123.759 81.6908 122.88 81.0751 121.959 81.2359 cv
121.955 81.2369 121.95 81.238 121.946 81.238 cv
120.623 81.4806 119.306 81.756 117.994 82.0494 cv
117.087 82.251 116.515 83.1508 116.717 84.0585 cv
116.919 84.9622 117.814 85.5337 118.72 85.3361 cv
cp
122.544 84.5742 mo
123.693 84.3728 124.849 84.2092 126.009 84.0816 cv
126.945 83.9786 127.62 83.1377 127.517 82.2018 cv
127.414 81.267 126.572 80.5918 125.637 80.6948 cv
125.635 80.6948 125.633 80.6948 125.632 80.6948 cv
124.398 80.8353 123.168 81.0147 121.946 81.238 cv
121.026 81.4068 120.417 82.29 120.585 83.2101 cv
120.753 84.1262 121.627 84.735 122.544 84.5742 cv
cp
126.009 84.0816 mo
127.172 83.9539 128.337 83.8393 129.503 83.7406 cv
130.442 83.6606 131.139 82.8344 131.059 81.8953 cv
130.979 80.9572 130.153 80.2608 129.215 80.3398 cv
128.019 80.4408 126.825 80.5608 125.632 80.6948 cv
124.696 80.8008 124.024 81.6447 124.13 82.5795 cv
124.236 83.5123 125.076 84.1845 126.009 84.0816 cv
cp
129.503 83.7406 mo
130.812 83.6293 132.118 83.493 133.424 83.3457 cv
134.368 83.2386 135.047 82.3866 134.94 81.4438 cv
134.832 80.5 133.981 79.8209 133.038 79.928 cv
133.03 79.9281 133.023 79.9292 133.016 79.9302 cv
131.751 80.0901 130.485 80.2329 129.215 80.3398 cv
128.276 80.4188 127.579 81.245 127.659 82.1831 cv
127.738 83.1223 128.563 83.8196 129.502 83.7406 cv
129.502 83.7406 129.502 83.7406 129.503 83.7406 cv
cp
133.424 83.3457 mo
134.583 83.2141 135.745 83.0914 136.908 83.0068 cv
137.867 82.9386 138.588 82.1051 138.519 81.1468 cv
138.45 80.1886 137.617 79.4673 136.658 79.5365 cv
136.653 79.5366 136.649 79.5366 136.644 79.5377 cv
135.431 79.6349 134.222 79.7781 133.016 79.9302 cv
132.073 80.0493 131.405 80.9102 131.525 81.8518 cv
131.643 82.7855 132.489 83.4516 133.424 83.3457 cv
cp
136.908 83.0068 mo
138.033 82.9266 139.154 82.7935 140.271 82.6404 cv
141.226 82.5102 141.894 81.6293 141.763 80.6738 cv
141.633 79.7192 140.752 79.0505 139.796 79.1817 cv
138.749 79.325 137.698 79.4523 136.644 79.5377 cv
135.686 79.6149 134.972 80.4533 135.049 81.4115 cv
135.125 82.3636 135.956 83.076 136.908 83.0068 cv
cp
140.271 82.6404 mo
141.387 82.4883 142.506 82.3562 143.629 82.26 cv
144.589 82.1768 145.301 81.3314 145.219 80.3703 cv
145.135 79.4102 144.29 78.698 143.33 78.7803 cv
143.33 78.7803 143.33 78.7803 143.329 78.7803 cv
142.148 78.8821 140.971 79.021 139.796 79.1817 cv
138.842 79.3129 138.173 80.1928 138.304 81.1483 cv
138.435 82.1039 139.315 82.7716 140.271 82.6404 cv
cp
143.629 82.26 mo
144.669 82.1698 145.71 82.0996 146.753 82.0494 cv
147.716 82.0021 148.458 81.1833 148.411 80.2198 cv
148.364 79.2573 147.545 78.5149 146.582 78.5612 cv
145.497 78.6149 144.412 78.6876 143.329 78.7803 cv
142.369 78.8636 141.657 79.709 141.74 80.67 cv
141.822 81.6301 142.668 82.3423 143.629 82.26 cv
cp
146.753 82.0494 mo
148.778 81.9496 150.811 81.9488 152.838 81.929 cv
153.808 81.9197 154.587 81.1265 154.578 80.1566 cv
154.568 79.1866 153.775 78.4079 152.805 78.4172 cv
152.802 78.4173 152.8 78.4173 152.797 78.4173 cv
150.726 78.4466 148.651 78.4599 146.582 78.5612 cv
145.619 78.6085 144.877 79.4272 144.924 80.3907 cv
144.971 81.3532 145.79 82.0957 146.753 82.0494 cv
cp
152.838 81.929 mo
155.212 81.9063 157.589 81.8764 159.96 81.7426 cv
160.938 81.6881 161.686 80.8503 161.631 79.8719 cv
161.576 78.8945 160.738 78.1452 159.76 78.2007 cv
159.756 78.2008 159.752 78.2008 159.748 78.2009 cv
157.436 78.347 155.115 78.3852 152.797 78.4173 cv
151.828 78.4317 151.053 79.2278 151.067 80.1977 cv
151.08 81.1646 151.872 81.9384 152.838 81.929 cv
cp
159.96 81.7426 mo
161.09 81.6794 162.223 81.6501 163.354 81.6238 cv
165.144 81.5828 166.933 81.5589 168.723 81.5409 cv
169.714 81.5303 170.509 80.7189 170.5 79.727 cv
170.489 78.736 169.678 77.9415 168.686 77.9511 cv
168.684 77.9511 168.682 77.9511 168.679 77.9512 cv
166.874 77.9763 165.068 78.0085 163.264 78.0587 cv
162.092 78.0914 160.918 78.1271 159.748 78.2009 cv
158.771 78.2633 158.029 79.1051 158.09 80.0834 cv
158.15 81.0568 158.986 81.798 159.96 81.7426 cv
cp
168.723 81.5409 mo
170.437 81.5228 172.15 81.5087 173.863 81.5157 cv
174.753 81.5192 175.647 81.5147 176.537 81.5683 cv
177.532 81.6296 178.389 80.8716 178.45 79.8758 cv
178.511 78.88 177.753 78.0229 176.757 77.9615 cv
175.798 77.9027 174.833 77.9081 173.871 77.9073 cv
172.14 77.9056 170.409 77.9269 168.679 77.9512 cv
167.688 77.9648 166.896 78.7801 166.91 79.771 cv
166.923 80.7599 167.735 81.5505 168.723 81.5409 cv
cp
176.537 81.5683 mo
177.637 81.6364 178.741 81.6815 179.844 81.7096 cv
180.842 81.7339 181.67 80.9451 181.695 79.9478 cv
181.719 78.9504 180.93 78.1216 179.933 78.0973 cv
178.874 78.0707 177.815 78.0271 176.757 77.9615 cv
175.762 77.9002 174.904 78.6583 174.843 79.6541 cv
174.782 80.6498 175.54 81.507 176.536 81.5683 cv
176.536 81.5683 176.536 81.5683 176.537 81.5683 cv
cp
179.844 81.7096 mo
181.167 81.7421 182.49 81.7526 183.813 81.7551 cv
184.812 81.7574 185.625 80.9488 185.627 79.9487 cv
185.629 78.9486 184.821 78.137 183.821 78.1347 cv
183.819 78.1348 183.817 78.1348 183.815 78.1348 cv
182.521 78.136 181.227 78.1292 179.933 78.0973 cv
178.936 78.072 178.107 78.8607 178.083 79.8581 cv
178.057 80.8564 178.846 81.6843 179.843 81.7096 cv
179.843 81.7096 179.843 81.7096 179.844 81.7096 cv
cp
183.813 81.7551 mo
185.315 81.7585 186.818 81.7948 188.319 81.8613 cv
189.326 81.9065 190.179 81.1264 190.224 80.1188 cv
190.27 79.1112 189.49 78.2583 188.482 78.2131 cv
188.476 78.2132 188.47 78.2133 188.464 78.2133 cv
186.914 78.1595 185.365 78.1327 183.815 78.1348 cv
182.815 78.1355 182.005 78.9471 182.007 79.9471 cv
182.008 80.9442 182.815 81.7527 183.813 81.7551 cv
cp
188.319 81.8613 mo
189.752 81.9255 191.184 81.9857 192.617 82.0399 cv
193.636 82.079 194.493 81.2849 194.532 80.2654 cv
194.57 79.2468 193.776 78.3901 192.758 78.351 cv
192.752 78.3511 192.747 78.3502 192.742 78.3502 cv
191.315 78.3089 189.89 78.2616 188.464 78.2133 cv
187.455 78.1782 186.611 78.9671 186.575 79.9746 cv
186.541 80.975 187.319 81.817 188.319 81.8613 cv
cp
192.617 82.0399 mo
194.123 82.0973 195.626 82.2116 197.127 82.3481 cv
198.15 82.4411 199.054 81.6874 199.147 80.6643 cv
199.24 79.6421 198.487 78.7369 197.464 78.6439 cv
197.461 78.6439 197.459 78.644 197.456 78.643 cv
195.888 78.5074 194.315 78.3968 192.742 78.3502 cv
191.722 78.3202 190.872 79.1222 190.843 80.1416 cv
190.813 81.154 191.605 82.0018 192.617 82.0399 cv
cp
197.127 82.3481 mo
197.855 82.4146 198.582 82.485 199.307 82.5705 cv
199.738 82.6215 200.171 82.6734 200.598 82.7534 cv
201.609 82.9436 202.582 82.2781 202.773 81.2668 cv
202.962 80.2585 202.301 79.2872 201.294 79.093 cv
200.031 78.8508 198.735 78.754 197.457 78.643 cv
196.432 78.555 195.531 79.3116 195.442 80.3357 cv
195.354 81.3558 196.107 82.256 197.127 82.3481 cv
cp
200.598 82.7534 mo
201.793 82.9784 203.001 83.1323 204.206 83.2921 cv
205.227 83.4282 206.165 82.7112 206.301 81.6895 cv
206.437 80.6689 205.72 79.7312 204.698 79.5952 cv
204.697 79.5952 204.695 79.5952 204.693 79.5942 cv
203.558 79.4475 202.418 79.3099 201.294 79.093 cv
200.284 78.8989 199.307 79.5603 199.112 80.5707 cv
198.918 81.581 199.58 82.5573 200.59 82.7525 cv
200.593 82.7525 200.595 82.7534 200.598 82.7534 cv
cp
204.206 83.2921 mo
205.647 83.4843 207.085 83.6945 208.516 83.9477 cv
209.536 84.1288 210.507 83.4493 210.688 82.4312 cv
210.868 81.413 210.189 80.4409 209.17 80.2598 cv
209.168 80.2598 209.166 80.2589 209.163 80.2589 cv
207.679 80.0013 206.186 79.7887 204.693 79.5942 cv
203.672 79.4622 202.736 80.1822 202.603 81.2038 cv
202.471 82.2224 203.188 83.1571 204.206 83.2921 cv
cp
208.516 83.9477 mo
209.666 84.1512 210.816 84.3508 211.969 84.5403 cv
212.993 84.7083 213.96 84.0149 214.128 82.9909 cv
214.296 81.9669 213.602 80.9999 212.578 80.8309 cv
212.576 80.8309 212.574 80.831 212.572 80.83 cv
211.434 80.6473 210.299 80.4556 209.163 80.2589 cv
208.144 80.0818 207.175 80.7652 206.999 81.7843 cv
206.823 82.8005 207.501 83.7676 208.516 83.9477 cv
cp
211.969 84.5403 mo
212.976 84.7055 213.986 84.8566 214.998 84.9888 cv
216.031 85.1237 216.977 84.3966 217.112 83.3649 cv
217.247 82.3323 216.52 81.3867 215.487 81.2518 cv
215.485 81.2509 215.482 81.2509 215.48 81.2509 cv
214.509 81.1273 213.539 80.9857 212.572 80.83 cv
211.547 80.666 210.583 81.3623 210.418 82.3873 cv
210.253 83.4093 210.947 84.3722 211.969 84.5403 cv
cp
214.998 84.9888 mo
216.126 85.1366 217.241 85.3705 218.349 85.6246 cv
219.364 85.8567 220.377 85.2218 220.609 84.206 cv
220.842 83.1892 220.206 82.1776 219.191 81.9445 cv
217.964 81.6638 216.728 81.4093 215.48 81.2509 cv
214.448 81.12 213.504 81.8501 213.373 82.8827 cv
213.242 83.9133 213.969 84.8549 214.998 84.9888 cv
cp
218.349 85.6246 mo
219.891 85.9775 221.442 86.2974 222.996 86.5982 cv
224.022 86.7962 225.014 86.1255 225.212 85.0991 cv
225.41 84.0737 224.739 83.0815 223.714 82.8835 cv
223.712 82.8825 223.709 82.8826 223.707 82.8816 cv
222.196 82.5953 220.69 82.2879 219.191 81.9445 cv
218.175 81.7114 217.162 82.3473 216.929 83.3631 cv
216.697 84.3788 217.332 85.3915 218.349 85.6246 cv
cp
222.996 86.5982 mo
224.278 86.8452 225.56 87.0981 226.831 87.4013 cv
227.85 87.6443 228.873 87.0153 229.116 85.9974 cv
229.359 84.9785 228.73 83.9558 227.711 83.7127 cv
227.711 83.7127 227.711 83.7127 227.71 83.7127 cv
226.385 83.3972 225.046 83.1359 223.707 82.8816 cv
222.68 82.6876 221.691 83.3613 221.496 84.3876 cv
221.302 85.4119 221.973 86.4001 222.996 86.5982 cv
cp
226.831 87.4013 mo
228.025 87.6863 229.219 87.9783 230.41 88.2734 cv
231.431 88.5244 232.462 87.9013 232.714 86.8813 cv
232.966 85.8603 232.343 84.8295 231.322 84.5775 cv
231.318 84.5765 231.315 84.5756 231.311 84.5746 cv
230.111 84.2867 228.911 83.9987 227.71 83.7127 cv
226.692 83.4697 225.669 84.0987 225.426 85.1176 cv
225.184 86.1365 225.813 87.1582 226.831 87.4013 cv
cp
230.41 88.2734 mo
232.011 88.6676 233.621 89.0178 235.237 89.3399 cv
236.277 89.5477 237.287 88.8728 237.495 87.8343 cv
237.702 86.7948 237.028 85.7837 235.988 85.5768 cv
235.984 85.5759 235.98 85.575 235.975 85.574 cv
234.414 85.2743 232.858 84.9465 231.311 84.5746 cv
230.289 84.3296 229.262 84.9586 229.016 85.9806 cv
228.771 86.9985 229.394 88.0223 230.41 88.2734 cv
cp
235.237 89.3399 mo
236.724 89.6365 238.207 89.9471 239.684 90.2908 cv
240.722 90.5317 241.76 89.8865 242.001 88.8486 cv
242.243 87.8097 241.598 86.7722 240.559 86.5303 cv
240.558 86.5304 240.556 86.5304 240.555 86.5294 cv
239.034 86.1802 237.507 85.8691 235.975 85.574 cv
234.935 85.3742 233.929 86.056 233.729 87.0964 cv
233.53 88.1318 234.204 89.134 235.237 89.3399 cv
cp
239.684 90.2908 mo
240.724 90.5327 241.763 90.7865 242.786 91.0885 cv
243.813 91.3915 244.891 90.8038 245.193 89.7772 cv
245.496 88.7506 244.908 87.6734 243.882 87.3705 cv
243.877 87.3695 243.872 87.3676 243.867 87.3656 cv
242.772 87.0534 241.664 86.7854 240.555 86.5294 cv
239.516 86.2906 238.479 86.9388 238.24 87.9776 cv
238.002 89.0145 238.647 90.049 239.684 90.2908 cv
cp
242.786 91.0885 mo
243.723 91.3646 244.652 91.6707 245.575 91.9909 cv
246.591 92.343 247.7 91.804 248.052 90.7878 cv
248.404 89.7716 247.866 88.6628 246.85 88.3107 cv
246.847 88.3098 246.845 88.3088 246.842 88.3078 cv
245.858 87.9713 244.867 87.6519 243.867 87.3656 cv
242.837 87.0717 241.765 87.6683 241.471 88.6978 cv
241.179 89.7203 241.766 90.7875 242.786 91.0885 cv
cp
245.575 91.9909 mo
247.345 92.6042 249.155 93.111 250.956 93.6239 cv
251.996 93.9188 253.077 93.3161 253.373 92.2775 cv
253.669 91.238 253.066 90.157 252.027 89.8611 cv
252.025 89.8602 252.023 89.8602 252.022 89.8592 cv
250.288 89.3715 248.547 88.8909 246.842 88.3078 cv
245.825 87.9607 244.718 88.5037 244.37 89.5209 cv
244.023 90.536 244.562 91.6397 245.575 91.9909 cv
cp
250.956 93.6239 mo
252.633 94.1003 254.316 94.5676 255.973 95.1062 cv
257.003 95.4412 258.11 94.8772 258.445 93.8472 cv
258.78 92.8162 258.216 91.7097 257.185 91.3748 cv
257.185 91.3748 257.184 91.3748 257.184 91.3738 cv
255.479 90.8217 253.747 90.345 252.022 89.8592 cv
250.982 89.5664 249.902 90.1721 249.609 91.2126 cv
249.317 92.2501 249.92 93.3291 250.956 93.6239 cv
cp
255.973 95.1062 mo
257.218 95.5107 258.45 95.9572 259.68 96.4069 cv
260.699 96.7809 261.827 96.2567 262.2 95.2383 cv
262.573 94.2198 262.05 93.0909 261.031 92.7178 cv
261.03 92.7178 261.028 92.7168 261.027 92.7169 cv
259.753 92.2518 258.475 91.7927 257.184 91.3738 cv
256.153 91.0409 255.047 91.6059 254.713 92.6358 cv
254.379 93.6658 254.943 94.7713 255.973 95.1062 cv
cp
259.68 96.4069 mo
261.096 96.9263 262.508 97.4558 263.911 98.0054 cv
264.925 98.4025 266.068 97.9031 266.466 96.8904 cv
266.863 95.8766 266.363 94.7334 265.351 94.3353 cv
265.348 94.3343 265.346 94.3344 265.343 94.3334 cv
263.91 93.7781 262.471 93.243 261.027 92.7169 cv
260.009 92.3448 258.881 92.871 258.51 93.8894 cv
258.139 94.9078 258.662 96.0348 259.68 96.4069 cv
cp
263.911 98.0054 mo
265.51 98.6327 267.099 99.2841 268.684 99.9426 cv
269.694 100.361 270.853 99.8821 271.272 98.8712 cv
271.691 97.8612 271.212 96.7028 270.202 96.2845 cv
270.2 96.2836 270.198 96.2826 270.196 96.2816 cv
268.584 95.6195 266.968 94.9624 265.343 94.3334 cv
264.328 93.9402 263.186 94.4437 262.793 95.4593 cv
262.401 96.471 262.901 97.6092 263.911 98.0054 cv
cp
268.684 99.9426 mo
270.17 100.558 271.657 101.173 273.159 101.747 cv
274.185 102.14 275.335 101.627 275.727 100.6 cv
276.119 99.5744 275.605 98.4254 274.579 98.0323 cv
274.576 98.0314 274.573 98.0304 274.57 98.0294 cv
273.102 97.4756 271.648 96.8786 270.196 96.2816 cv
269.185 95.8665 268.027 96.349 267.612 97.36 cv
267.197 98.3699 267.677 99.5244 268.684 99.9426 cv
cp
273.159 101.747 mo
274.641 102.314 276.105 102.928 277.567 103.542 cv
278.583 103.967 279.752 103.489 280.177 102.473 cv
280.603 101.458 280.125 100.289 279.109 99.8634 cv
279.108 99.8634 li
277.604 99.234 276.097 98.6046 274.57 98.0294 cv
273.543 97.6415 272.396 98.1609 272.009 99.1886 cv
271.622 100.213 272.136 101.356 273.159 101.747 cv
cp
277.567 103.542 mo
279.552 104.373 281.545 105.188 283.543 105.987 cv
284.569 106.397 285.733 105.897 286.143 104.87 cv
286.553 103.844 286.054 102.68 285.027 102.27 cv
285.025 102.269 285.023 102.268 285.02 102.268 cv
283.041 101.485 281.071 100.684 279.108 99.8634 cv
278.092 99.4383 276.924 99.917 276.5 100.933 cv
276.074 101.948 276.552 103.116 277.567 103.542 cv
cp
283.543 105.987 mo
285.37 106.716 287.168 107.52 288.916 108.425 cv
289.902 108.935 291.115 108.549 291.625 107.563 cv
292.136 106.577 291.75 105.365 290.764 104.854 cv
290.762 104.853 290.761 104.852 290.759 104.851 cv
288.893 103.891 286.972 103.038 285.02 102.268 cv
283.993 101.861 282.831 102.366 282.424 103.393 cv
282.019 104.419 282.519 105.578 283.543 105.987 cv
cp
288.916 108.425 mo
290.558 109.275 292.213 110.104 293.881 110.904 cv
294.886 111.385 296.092 110.961 296.575 109.955 cv
297.057 108.95 296.632 107.745 295.626 107.262 cv
295.624 107.261 295.622 107.26 295.62 107.258 cv
293.987 106.483 292.367 105.678 290.759 104.851 cv
289.772 104.344 288.56 104.732 288.052 105.72 cv
287.545 106.705 287.931 107.915 288.916 108.425 cv
cp
293.881 110.904 mo
295.281 111.575 296.683 112.243 298.088 112.906 cv
299.101 113.383 300.309 112.949 300.786 111.936 cv
301.264 110.923 300.83 109.715 299.817 109.238 cv
299.815 109.237 299.813 109.236 299.811 109.235 cv
298.412 108.582 297.015 107.921 295.62 107.258 cv
294.612 106.781 293.408 107.209 292.93 108.217 cv
292.453 109.222 292.878 110.423 293.881 110.904 cv
cp
298.088 112.906 mo
299.346 113.499 300.589 114.126 301.817 114.777 cv
302.809 115.302 304.037 114.924 304.563 113.933 cv
305.088 112.943 304.711 111.713 303.719 111.189 cv
302.432 110.507 301.131 109.852 299.811 109.235 cv
298.797 108.761 297.591 109.199 297.117 110.213 cv
296.643 111.226 297.078 112.43 298.088 112.906 cv
cp
301.817 114.777 mo
303.393 115.612 304.94 116.5 306.476 117.404 cv
307.444 117.972 308.69 117.649 309.259 116.681 cv
309.828 115.713 309.505 114.468 308.537 113.898 cv
308.536 113.898 308.535 113.897 308.534 113.897 cv
306.945 112.966 305.347 112.051 303.719 111.189 cv
302.728 110.663 301.5 111.041 300.974 112.032 cv
300.449 113.022 300.827 114.252 301.817 114.776 cv
cp
306.476 117.404 mo
307.855 118.214 309.234 119.025 310.613 119.833 cv
311.582 120.402 312.829 120.078 313.398 119.109 cv
313.966 118.14 313.642 116.895 312.674 116.325 cv
311.295 115.514 309.915 114.705 308.534 113.897 cv
307.566 113.33 306.32 113.654 305.753 114.623 cv
305.186 115.591 305.51 116.835 306.476 117.404 cv
cp
310.613 119.833 mo
311.649 120.442 312.672 121.074 313.687 121.715 cv
314.637 122.315 315.893 122.032 316.493 121.083 cv
317.092 120.133 316.809 118.878 315.86 118.278 cv
314.807 117.612 313.748 116.956 312.674 116.325 cv
311.705 115.755 310.458 116.079 309.889 117.048 cv
309.32 118.016 309.643 119.264 310.612 119.832 cv
310.612 119.833 310.612 119.833 310.613 119.833 cv
cp
313.687 121.715 mo
315.286 122.726 316.966 123.61 318.651 124.466 cv
319.657 124.979 320.887 124.577 321.399 123.572 cv
321.91 122.566 321.509 121.336 320.503 120.825 cv
320.499 120.823 320.496 120.821 320.492 120.819 cv
318.92 120.031 317.348 119.219 315.86 118.278 cv
314.911 117.678 313.655 117.961 313.054 118.91 cv
312.455 119.859 312.737 121.116 313.686 121.715 cv
313.687 121.715 313.687 121.715 313.687 121.715 cv
cp
318.651 124.466 mo
320.647 125.482 322.622 126.537 324.575 127.631 cv
325.566 128.187 326.819 127.834 327.374 126.843 cv
327.93 125.852 327.577 124.599 326.585 124.043 cv
326.585 124.043 326.584 124.042 326.583 124.043 cv
324.577 122.922 322.546 121.847 320.492 120.819 cv
319.483 120.313 318.256 120.722 317.75 121.731 cv
317.247 122.735 317.649 123.957 318.651 124.466 cv
cp
324.575 127.631 mo
326.045 128.455 327.515 129.279 328.974 130.121 cv
329.958 130.689 331.218 130.353 331.786 129.367 cv
332.355 128.382 332.018 127.123 331.033 126.555 cv
331.032 126.555 331.032 126.555 331.032 126.555 cv
329.557 125.703 328.07 124.872 326.583 124.043 cv
325.592 123.488 324.339 123.843 323.786 124.834 cv
323.232 125.825 323.586 127.077 324.575 127.631 cv
cp
328.974 130.121 mo
329.908 130.661 330.855 131.18 331.819 131.664 cv
332.836 132.175 334.073 131.764 334.585 130.748 cv
335.095 129.731 334.684 128.494 333.668 127.983 cv
333.668 127.983 333.668 127.983 333.667 127.983 cv
332.775 127.534 331.897 127.053 331.032 126.555 cv
330.047 125.986 328.788 126.324 328.22 127.309 cv
327.651 128.293 327.989 129.552 328.974 130.121 cv
cp
331.819 131.664 mo
332.632 132.072 333.456 132.459 334.3 132.802 cv
335.362 133.232 336.572 132.721 337.002 131.659 cv
337.434 130.598 336.923 129.388 335.861 128.956 cv
335.844 128.949 335.826 128.942 335.809 128.937 cv
335.078 128.661 334.366 128.334 333.667 127.983 cv
332.651 127.473 331.413 127.883 330.903 128.9 cv
330.393 129.916 330.803 131.153 331.819 131.665 cv
cp
334.3 132.802 mo
334.877 133.036 335.515 133.288 336.15 133.191 cv
336.456 133.144 336.744 133.019 336.987 132.827 cv
337.53 132.398 337.777 131.692 337.681 131.016 cv
337.623 130.607 337.446 130.221 337.19 129.898 cv
336.834 129.451 336.341 129.135 335.809 128.937 cv
334.738 128.533 333.541 129.076 333.138 130.149 cv
332.743 131.202 333.258 132.378 334.3 132.802 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
46.0504 98.2365 mo
46.0504 98.2365 li
46.1273 98.9957 46.8048 99.5488 47.563 99.4719 cv
48.3161 99.3961 48.8673 98.7286 48.8005 97.9753 cv
48.7188 97.0642 48.6342 96.1531 48.5195 95.2455 cv
48.4467 94.6693 47.9219 94.2614 47.3457 94.3341 cv
47.0232 94.3749 46.7374 94.5633 46.5727 94.8432 cv
45.9814 95.8472 45.9362 97.1078 46.0504 98.2365 cv
cp
46.0504 98.2415 mo
46.1597 99.2853 46.3379 100.322 46.524 101.355 cv
46.6577 102.101 47.3706 102.597 48.1171 102.464 cv
48.8636 102.33 49.3602 101.616 49.2265 100.87 cv
49.2264 100.87 49.2254 100.868 49.2254 100.868 cv
49.0522 99.9115 48.8839 98.9484 48.8006 97.9803 cv
48.7357 97.22 48.067 96.6568 47.3067 96.7217 cv
46.5464 96.7867 45.9832 97.4553 46.0482 98.2156 cv
46.0493 98.2246 46.0504 98.2325 46.0504 98.2415 cv
cp
46.524 101.355 mo
46.6909 102.287 46.8461 103.239 47.1267 104.145 cv
47.3502 104.869 48.119 105.274 48.8424 105.05 cv
49.5609 104.828 49.967 104.067 49.7505 103.346 cv
49.508 102.539 49.3751 101.694 49.2254 100.868 cv
49.0907 100.122 48.3758 99.6264 47.6304 99.7621 cv
46.8849 99.8969 46.3902 100.61 46.524 101.355 cv
cp
47.1267 104.145 mo
47.3014 104.711 47.5278 105.261 47.7891 105.793 cv
48.122 106.469 48.9403 106.747 49.6165 106.414 cv
50.2886 106.083 50.5681 105.272 50.2432 104.598 cv
50.0485 104.193 49.8795 103.776 49.7505 103.346 cv
49.532 102.62 48.7681 102.209 48.0426 102.426 cv
47.3171 102.644 46.9051 103.409 47.1226 104.134 cv
47.1236 104.138 47.1247 104.141 47.1267 104.145 cv
cp
47.7891 105.793 mo
48.039 106.3 48.2313 106.834 48.3986 107.373 cv
48.6251 108.098 49.3959 108.503 50.1213 108.276 cv
50.8467 108.05 51.2517 107.279 51.0252 106.554 cv
51.022 106.543 51.0179 106.531 51.0138 106.52 cv
50.7911 105.866 50.5425 105.219 50.2432 104.598 cv
49.9162 103.919 49.1008 103.633 48.4216 103.96 cv
47.7424 104.287 47.4569 105.102 47.7839 105.782 cv
47.786 105.786 47.788 105.789 47.7891 105.793 cv
cp
48.3986 107.373 mo
48.5773 107.943 48.7291 108.523 48.829 109.112 cv
48.959 109.874 49.683 110.386 50.4445 110.256 cv
51.207 110.126 51.7196 109.403 51.5897 108.64 cv
51.5875 108.629 51.5864 108.619 51.5843 108.608 cv
51.446 107.899 51.2468 107.203 51.0138 106.52 cv
50.7683 105.801 49.9868 105.416 49.2676 105.661 cv
48.5624 105.903 48.1772 106.661 48.3986 107.373 cv
cp
48.829 109.112 mo
48.945 109.791 49.1288 110.459 49.3764 111.102 cv
49.659 111.836 50.4823 112.201 51.2161 111.919 cv
51.9488 111.636 52.3152 110.813 52.0326 110.08 cv
52.0274 110.068 52.0233 110.056 52.0181 110.043 cv
51.8257 109.582 51.679 109.1 51.5843 108.608 cv
51.4364 107.849 50.7005 107.354 49.9422 107.502 cv
49.1949 107.647 48.7012 108.362 48.829 109.112 cv
cp
49.3764 111.102 mo
49.5651 111.591 49.761 112.094 50.0492 112.534 cv
50.484 113.197 51.3732 113.382 52.0362 112.948 cv
52.6991 112.515 52.8847 111.624 52.4509 110.961 cv
52.2676 110.681 52.1458 110.351 52.0181 110.043 cv
51.7156 109.319 50.8825 108.976 50.157 109.278 cv
49.4455 109.574 49.0999 110.384 49.3764 111.102 cv
cp
49.9604 112.378 mo
50.0126 112.483 49.9506 112.316 49.9602 112.362 cv
49.9728 112.416 49.9795 112.473 49.9851 112.53 cv
50.0133 112.8 50.0145 113.073 50.0107 113.345 cv
50.0012 114.156 50.6501 114.822 51.4612 114.832 cv
52.2724 114.842 52.9388 114.192 52.9483 113.381 cv
52.949 113.356 52.9487 113.33 52.9474 113.305 cv
52.9306 112.896 52.9038 112.485 52.838 112.081 cv
52.7745 111.69 52.6698 111.296 52.4509 110.961 cv
52.0171 110.298 51.1269 110.113 50.4639 110.547 cv
49.8595 110.943 49.6437 111.727 49.9604 112.378 cv
cp
53.0013 114.663 mo
52.984 114.21 52.9657 113.757 52.9474 113.305 cv
52.9149 112.494 52.2315 111.863 51.4208 111.895 cv
50.6401 111.927 50.0205 112.563 50.0107 113.345 cv
50.005 113.798 50.0003 114.251 49.9946 114.704 cv
49.9844 115.536 50.6494 116.217 51.4806 116.227 cv
52.3107 116.237 52.993 115.572 53.0032 114.741 cv
53.0029 114.715 53.0026 114.689 53.0013 114.663 cv
cp
52.9774 115.012 mo
52.9849 114.967 52.9904 114.921 52.9948 114.876 cv
53.0801 114.049 52.4774 113.311 51.6514 113.226 cv
50.9044 113.15 50.2161 113.636 50.0377 114.365 cv
50.0262 114.409 50.0167 114.453 50.0082 114.498 cv
49.8568 115.316 50.397 116.103 51.2149 116.254 cv
52.0327 116.407 52.8184 115.866 52.9709 115.048 cv
52.9727 115.036 52.9756 115.024 52.9774 115.012 cv
cp
49.9968 114.975 mo
49.9968 114.975 li
50.0056 115.04 50.0183 115.105 50.0361 115.168 cv
50.1802 115.518 li
50.5917 116.241 51.5117 116.495 52.2349 116.083 cv
52.9472 115.678 53.2047 114.778 52.8152 114.057 cv
52.5946 113.749 li
52.55 113.701 52.5025 113.656 52.452 113.614 cv
52.151 113.363 51.7638 113.262 51.3955 113.151 cv
50.8756 112.995 50.3271 113.289 50.1711 113.809 cv
50.1682 113.817 50.1663 113.825 50.1644 113.833 cv
50.0628 114.204 49.9432 114.587 49.9968 114.975 cv
cp
1 .824124 .138247 .0232547 cmyk
f
67.0969 91.0194 mo
67.0969 91.0194 li
67.2311 91.8019 67.9743 92.3272 68.7558 92.1931 cv
69.5352 92.0589 70.0606 91.3207 69.9305 90.5402 cv
69.7938 89.7188 69.6652 88.8942 69.5615 88.0684 cv
69.4931 87.5242 69.4317 86.9778 69.4123 86.4301 cv
69.3913 85.8353 68.8918 85.3711 68.298 85.392 cv
67.9132 85.4066 67.5657 85.6236 67.3857 85.9628 cv
67.0266 86.638 66.9048 87.4225 66.8726 88.1789 cv
66.8318 89.1295 66.9359 90.0833 67.0969 91.0194 cv
cp
67.0969 91.0215 mo
67.2299 91.7879 67.384 92.5602 67.4581 93.3354 cv
67.5312 94.1155 68.224 94.6885 69.0052 94.6153 cv
69.7664 94.5434 70.3336 93.8817 70.2887 93.1182 cv
70.2376 92.2557 70.0715 91.3936 69.9305 90.5422 cv
69.8013 89.7597 69.062 89.2293 68.2785 89.3585 cv
67.496 89.4887 66.9666 90.2279 67.0958 91.0105 cv
67.0959 91.0145 67.0969 91.0175 67.0969 91.0215 cv
cp
67.4581 93.3354 mo
67.5084 93.8708 67.6435 94.3943 67.8294 94.8981 cv
68.098 95.629 68.9084 96.0035 69.6393 95.735 cv
70.3702 95.4654 70.7447 94.6549 70.4752 93.924 cv
70.4752 93.924 70.4752 93.924 70.4751 93.923 cv
70.3801 93.6651 70.3049 93.394 70.2887 93.1182 cv
70.2425 92.3357 69.5705 91.7385 68.788 91.7847 cv
68.0045 91.8299 67.4073 92.5019 67.4535 93.2854 cv
67.4547 93.3014 67.4559 93.3184 67.4581 93.3354 cv
cp
67.8294 94.8981 mo
68.0071 95.3831 68.0783 95.9123 68.1443 96.4215 cv
68.2454 97.2004 68.9579 97.7511 69.7368 97.6499 cv
70.5157 97.5498 71.0663 96.8363 70.9652 96.0574 cv
70.9641 96.0484 70.963 96.0385 70.9619 96.0295 cv
70.8555 95.3187 70.7241 94.5992 70.4751 93.923 cv
70.2056 93.1931 69.3951 92.8186 68.6642 93.0882 cv
67.9344 93.3578 67.5609 94.1682 67.8294 94.8981 cv
cp
68.1443 96.4215 mo
68.2422 97.1784 68.343 97.9343 68.4509 98.6891 cv
68.5621 99.4788 69.2926 100.028 70.0823 99.916 cv
70.8721 99.8047 71.4216 99.0743 71.3093 98.2845 cv
71.3082 98.2766 71.3071 98.2675 71.306 98.2596 cv
71.1873 97.5169 71.0726 96.7732 70.9619 96.0295 cv
70.8457 95.2528 70.1214 94.7172 69.3447 94.8333 cv
68.579 94.9473 68.0453 95.6536 68.1443 96.4215 cv
cp
68.4509 98.6891 mo
68.5719 99.5467 68.7838 100.39 69.0505 101.213 cv
69.2995 101.98 70.1215 102.4 70.8886 102.152 cv
71.6547 101.904 72.0751 101.081 71.8271 100.315 cv
71.8251 100.31 71.824 100.306 71.823 100.302 cv
71.6002 99.6352 71.4161 98.9533 71.306 98.2596 cv
71.1798 97.472 70.4395 96.9356 69.6519 97.0609 cv
68.8743 97.185 68.3397 97.9093 68.4509 98.6891 cv
cp
69.0505 101.213 mo
69.2072 101.696 69.3891 102.2 69.449 102.708 cv
69.5435 103.512 70.2712 104.086 71.0742 103.991 cv
71.8781 103.896 72.4516 103.168 72.3582 102.365 cv
72.2749 101.661 72.0458 100.971 71.823 100.302 cv
71.568 99.5376 70.7411 99.1242 69.9771 99.3792 cv
69.217 99.6331 68.8036 100.452 69.0505 101.213 cv
cp
69.449 102.708 mo
69.5412 103.492 69.8143 104.262 70.062 105.007 cv
70.3191 105.778 71.153 106.195 71.924 105.938 cv
72.6951 105.681 73.1123 104.847 72.8553 104.076 cv
72.8532 104.071 72.8522 104.067 72.8501 104.062 cv
72.7207 103.684 72.5952 103.306 72.4867 102.921 cv
72.4356 102.74 72.3794 102.553 72.3582 102.365 cv
72.2638 101.562 71.536 100.987 70.7321 101.081 cv
69.9291 101.176 69.3546 101.904 69.449 102.708 cv
cp
70.062 105.007 mo
70.2807 105.661 70.4974 106.317 70.721 106.969 cv
70.9882 107.751 71.8381 108.167 72.6201 107.9 cv
73.402 107.633 73.818 106.782 73.5509 106.001 cv
73.5405 105.972 73.5302 105.944 73.5189 105.917 cv
73.2697 105.309 73.0644 104.682 72.8501 104.062 cv
72.5861 103.293 71.7482 102.885 70.9793 103.15 cv
70.2163 103.413 69.807 104.241 70.062 105.007 cv
cp
70.721 106.969 mo
70.7542 107.068 70.7884 107.167 70.8205 107.266 cv
70.8195 107.266 li
70.8704 107.509 70.981 107.736 71.1413 107.926 cv
71.2752 108.087 71.4417 108.218 71.6298 108.31 cv
71.9316 108.46 72.2751 108.504 72.6043 108.436 cv
73.0413 108.347 73.4161 108.068 73.6295 107.677 cv
73.8811 107.212 73.8446 106.742 73.6682 106.287 cv
73.6198 106.163 73.5693 106.04 73.5189 105.917 cv
73.2059 105.153 72.3316 104.788 71.5672 105.101 cv
70.8357 105.402 70.4643 106.221 70.721 106.969 cv
cp
71.1383 107.924 mo
71.1383 107.924 li
71.6748 108.564 72.6278 108.649 73.2686 108.113 cv
73.9044 107.582 73.9933 106.637 73.4668 105.995 cv
73.0579 105.496 72.3567 105.306 71.7533 105.534 cv
71.4406 105.65 71.1772 105.87 71.0035 106.155 cv
70.6679 106.705 70.7244 107.429 71.1383 107.924 cv
cp
.0121462 .459541 .972869 0 cmyk
f
56.7068 92.7509 mo
56.7068 92.7509 li
56.8013 93.5578 57.5311 94.1353 58.3381 94.0419 cv
59.145 93.9474 59.7225 93.2176 59.629 92.4106 cv
59.6235 92.3677 59.617 92.3248 59.6075 92.2819 cv
59.529 91.8998 59.4513 91.4977 59.4797 91.1043 cv
59.5228 90.5158 59.0798 90.0039 58.4912 89.9608 cv
58.3081 89.948 58.1255 89.9821 57.9594 90.0601 cv
56.9529 90.5329 56.5857 91.7122 56.7068 92.7509 cv
cp
56.7068 92.7509 mo
56.7813 93.3871 56.8388 94.0244 56.8832 94.663 cv
56.9399 95.4833 57.6492 96.1021 58.4695 96.0454 cv
59.259 95.9912 59.8672 95.328 59.8549 94.5371 cv
59.8421 93.7802 59.7612 93.0241 59.6075 92.2819 cv
59.4432 91.4868 58.6642 90.9759 57.869 91.1402 cv
57.1228 91.2949 56.619 91.9939 56.7068 92.7509 cv
cp
56.8832 94.663 mo
56.9448 95.5643 57.1403 96.453 57.3854 97.3202 cv
57.6035 98.0917 58.4048 98.5394 59.1753 98.3223 cv
59.9378 98.1064 60.3856 97.3201 60.1826 96.5544 cv
60.0079 95.8974 59.8659 95.219 59.8549 94.5371 cv
59.8413 93.7152 59.1636 93.0601 58.3427 93.0738 cv
57.5208 93.0874 56.8657 93.7641 56.8794 94.586 cv
56.8806 94.612 56.881 94.638 56.8832 94.663 cv
cp
57.3854 97.3202 mo
57.6014 98.0827 57.7934 98.8535 57.9346 99.6339 cv
58.0757 100.41 58.8198 100.926 59.5972 100.785 cv
60.3646 100.646 60.8781 99.9164 60.752 99.1469 cv
60.6088 98.2735 60.4097 97.4098 60.1826 96.5544 cv
59.9765 95.7798 59.1831 95.319 58.4084 95.5251 cv
57.6348 95.7302 57.1741 96.5247 57.3792 97.2983 cv
57.3813 97.3053 57.3833 97.3133 57.3854 97.3202 cv
cp
57.9346 99.6339 mo
58.0799 100.43 58.2133 101.229 58.3407 102.028 cv
58.4648 102.81 59.1981 103.342 59.9797 103.218 cv
60.7603 103.093 61.2927 102.36 61.1685 101.578 cv
61.1674 101.57 61.1654 101.562 61.1642 101.553 cv
61.0219 100.752 60.8835 99.9504 60.752 99.1469 cv
60.6239 98.3683 59.8887 97.8399 59.1101 97.968 cv
58.3306 98.0952 57.8031 98.8304 57.9303 99.61 cv
57.9324 99.618 57.9335 99.6259 57.9346 99.6339 cv
cp
58.3407 102.028 mo
58.4778 102.895 58.6639 103.757 58.9407 104.589 cv
59.1916 105.346 60.0094 105.756 60.7655 105.504 cv
61.5216 105.253 61.9311 104.437 61.6812 103.681 cv
61.4511 102.988 61.2917 102.272 61.1642 101.553 cv
61.0261 100.775 60.283 100.255 59.5046 100.394 cv
58.7351 100.53 58.2176 101.257 58.3407 102.028 cv
cp
58.9407 104.589 mo
59.1377 105.182 59.2978 105.788 59.412 106.403 cv
59.5592 107.192 60.3184 107.712 61.1067 107.565 cv
61.896 107.418 62.4162 106.659 62.2689 105.871 cv
62.2668 105.861 62.2647 105.852 62.2626 105.842 cv
62.112 105.111 61.9156 104.39 61.6812 103.681 cv
61.4303 102.924 60.6145 102.514 59.8574 102.765 cv
59.1003 103.014 58.6898 103.831 58.9407 104.588 cv
58.9407 104.588 58.9407 104.588 58.9407 104.589 cv
cp
59.412 106.403 mo
59.5486 107.136 59.7391 107.86 59.9814 108.565 cv
60.2454 109.333 61.0822 109.743 61.8502 109.479 cv
62.6171 109.215 63.0263 108.378 62.7623 107.61 cv
62.7603 107.604 62.7582 107.597 62.7561 107.591 cv
62.5504 107.02 62.3856 106.435 62.2626 105.842 cv
62.1004 105.056 61.3314 104.551 60.5453 104.714 cv
59.7711 104.875 59.2669 105.626 59.412 106.403 cv
cp
59.9824 108.568 mo
60.2857 109.445 60.6384 110.359 61.2042 111.102 cv
61.5312 111.533 62.1442 111.615 62.5744 111.288 cv
62.6954 111.197 62.793 111.079 62.8594 110.943 cv
63.0988 110.459 63.1592 109.9 63.1339 109.367 cv
63.1039 108.761 62.9598 108.164 62.7571 107.594 cv
62.4842 106.829 61.6434 106.43 60.8786 106.703 cv
60.1187 106.974 59.7184 107.807 59.9824 108.568 cv
cp
.10956 1 1 .0296941 cmyk
f
76.0386 87.401 mo
76.0386 87.401 li
76.1013 88.2283 76.8235 88.8469 77.6509 88.7842 cv
78.4722 88.7216 79.0899 88.0083 79.0342 87.1859 cv
78.9615 86.0966 78.8997 85.0043 78.7829 83.9196 cv
78.7178 83.3093 78.1696 82.8677 77.5593 82.9329 cv
77.3336 82.9576 77.1206 83.05 76.9494 83.1991 cv
76.4276 83.6512 76.202 84.3629 76.0927 85.0232 cv
75.9629 85.8068 75.9783 86.6116 76.0386 87.401 cv
cp
76.0386 87.405 mo
76.116 88.3752 76.1724 89.3475 76.2068 90.3202 cv
76.2364 91.1399 76.9239 91.7799 77.7426 91.7513 cv
78.5573 91.7217 79.1954 91.0422 79.1739 90.2284 cv
79.147 89.2147 79.1001 88.2021 79.0343 87.1899 cv
78.9816 86.3624 78.2672 85.7348 77.4397 85.7875 cv
76.6113 85.8412 75.9836 86.5556 76.0374 87.383 cv
76.0374 87.391 76.0385 87.398 76.0386 87.405 cv
cp
76.2068 90.3202 mo
76.2365 91.1469 76.2722 91.9735 76.3328 92.7989 cv
76.3924 93.6142 77.1026 94.2269 77.918 94.1664 cv
78.7343 94.1068 79.347 93.3966 79.2865 92.5812 cv
79.2864 92.5772 79.2864 92.5742 79.2863 92.5703 cv
79.2232 91.7909 79.195 91.0092 79.1739 90.2284 cv
79.1523 89.4086 78.4697 88.7626 77.6509 88.7842 cv
76.8311 88.8058 76.185 89.4884 76.2066 90.3072 cv
76.2067 90.3122 76.2067 90.3162 76.2068 90.3202 cv
cp
76.3328 92.7989 mo
76.3839 93.4913 76.487 94.1812 76.654 94.8552 cv
76.8503 95.652 77.655 96.1376 78.4518 95.9412 cv
79.2475 95.7439 79.7341 94.9391 79.5368 94.1434 cv
79.5368 94.1424 li
79.4087 93.6259 79.3286 93.0998 79.2863 92.5703 cv
79.2198 91.755 78.5056 91.1473 77.6903 91.2139 cv
76.8791 91.2794 76.2733 91.9875 76.3328 92.7989 cv
cp
76.654 94.8552 mo
76.7862 95.3897 76.8736 95.9347 76.929 96.4821 cv
77.0127 97.3022 77.7447 97.8986 78.5638 97.815 cv
79.3828 97.7314 79.9793 97.0004 79.8957 96.1803 cv
79.8956 96.1743 79.8945 96.1683 79.8945 96.1623 cv
79.8165 95.4822 79.7016 94.8065 79.5368 94.1424 cv
79.3394 93.3457 78.5337 92.8611 77.738 93.0584 cv
76.9422 93.2558 76.4576 94.0595 76.654 94.8552 cv
cp
76.929 96.4821 mo
77.0047 97.2233 77.1735 97.9703 77.5372 98.6251 cv
77.9387 99.3484 78.8508 99.6088 79.5731 99.2073 cv
80.2965 98.8058 80.5568 97.8937 80.1553 97.1713 cv
79.9878 96.8693 79.9324 96.4999 79.8945 96.1623 cv
79.8009 95.3444 79.062 94.757 78.244 94.8496 cv
77.432 94.9421 76.8465 95.67 76.929 96.4821 cv
cp
77.5372 98.6251 mo
77.5975 98.7344 77.628 98.8621 77.6564 98.9827 cv
77.7186 99.254 77.7498 99.5317 77.7701 99.8094 cv
77.8318 100.644 78.5593 101.271 79.3936 101.21 cv
80.2289 101.148 80.8564 100.421 80.7946 99.586 cv
80.7935 99.571 80.7923 99.555 80.7901 99.539 cv
80.7056 98.73 80.5547 97.8897 80.1553 97.1713 cv
79.7528 96.448 78.8417 96.1877 78.1194 96.5892 cv
77.396 96.9907 77.1357 97.9028 77.5372 98.6251 cv
cp
77.7701 99.8094 mo
77.8318 100.642 77.9688 101.486 78.3018 102.256 cv
78.64 103.042 79.5513 103.404 80.3364 103.066 cv
81.1215 102.727 81.4838 101.816 81.1446 101.031 cv
81.1384 101.015 81.1312 100.999 81.1241 100.984 cv
80.9138 100.539 80.8408 100.023 80.7901 99.539 cv
80.7033 98.707 79.9572 98.1027 79.1242 98.1895 cv
78.3101 98.275 77.7105 98.9921 77.7701 99.8094 cv
cp
78.3018 102.256 mo
78.5023 102.723 78.7117 103.187 78.9361 103.643 cv
79.3233 104.427 80.2721 104.748 81.0556 104.361 cv
81.8391 103.975 82.161 103.026 81.7748 102.243 cv
81.7595 102.213 81.7441 102.183 81.7268 102.153 cv
81.5083 101.773 81.3107 101.38 81.1241 100.984 cv
80.759 100.21 79.837 99.8782 79.0632 100.243 cv
78.3074 100.599 77.9708 101.49 78.3018 102.256 cv
cp
78.9361 103.643 mo
78.9637 103.699 78.9914 103.754 79.018 103.811 cv
79.015 103.811 li
79.1003 104.169 79.305 104.486 79.5956 104.71 cv
79.9135 104.957 80.318 105.08 80.7216 105.046 cv
80.9344 105.029 81.1407 104.969 81.3306 104.87 cv
81.3306 104.871 li
81.5423 104.761 81.7265 104.605 81.8713 104.415 cv
82.2318 103.938 82.2864 103.313 82.0581 102.777 cv
82.0273 102.705 81.9914 102.634 81.9556 102.564 cv
81.883 102.425 81.8054 102.289 81.7268 102.153 cv
81.2909 101.396 80.3238 101.136 79.5658 101.572 cv
78.8427 101.988 78.5673 102.894 78.9361 103.643 cv
cp
78.8247 102.93 mo
78.8694 103.59 79.0354 104.269 79.5825 104.701 cv
80.279 105.25 81.2887 105.132 81.8385 104.435 cv
82.3687 103.763 82.2783 102.792 81.6327 102.229 cv
81.1083 101.771 80.4108 101.734 79.7537 101.81 cv
79.1954 101.877 78.7871 102.369 78.8247 102.93 cv
cp
.887358 .312901 .763577 .186648 cmyk
f
143.708 72.8033 mo
143.722 72.7742 143.737 72.746 143.751 72.7168 cv
143.753 72.7168 li
143.799 72.6573 143.838 72.5918 143.869 72.5224 cv
143.898 72.4581 143.928 72.3937 143.953 72.3284 cv
144.112 71.9235 144.052 71.4602 143.79 71.1093 cv
143.452 70.6592 142.869 70.489 142.332 70.6023 cv
142.062 70.6585 141.812 70.7794 141.584 70.9321 cv
140.916 71.384 140.739 72.2931 141.191 72.9628 cv
141.643 73.6316 142.551 73.808 143.221 73.3561 cv
143.427 73.2166 143.595 73.0257 143.708 72.8033 cv
cp
143.022 74.4084 mo
143.231 73.866 143.446 73.3224 143.708 72.8033 cv
144.071 72.083 143.783 71.2033 143.061 70.8388 cv
142.589 70.6003 142.024 70.6359 141.584 70.9321 cv
140.789 71.4695 140.284 72.3484 139.946 73.2254 cv
139.62 74.0753 140.043 75.0284 140.893 75.3555 cv
141.742 75.6815 142.696 75.2583 143.022 74.4084 cv
cp
142.26 77.5736 mo
142.376 76.9242 142.502 76.2757 142.659 75.6348 cv
142.76 75.2206 142.87 74.8063 143.022 74.4084 cv
143.349 73.5586 142.925 72.6055 142.075 72.2794 cv
141.226 71.9524 140.272 72.3766 139.946 73.2254 cv
139.482 74.4319 139.237 75.7259 139.009 76.9926 cv
138.848 77.8906 139.445 78.7487 140.342 78.9111 cv
141.24 79.0726 142.098 78.4755 142.26 77.5776 cv
142.26 77.5766 142.26 77.5746 142.26 77.5736 cv
cp
141.659 80.8048 mo
141.886 79.7331 142.07 78.6519 142.26 77.5736 cv
142.42 76.6757 141.821 75.8186 140.923 75.6591 cv
140.027 75.5006 139.171 76.0977 139.009 76.9926 cv
138.82 78.0479 138.632 79.1032 138.431 80.1556 cv
138.262 81.0486 138.847 81.9109 139.74 82.0804 cv
140.62 82.2491 141.472 81.6821 141.659 80.8048 cv
cp
141.438 83.1746 mo
141.473 82.3891 141.495 81.5778 141.659 80.8048 cv
141.847 79.9156 141.279 79.0422 140.389 78.8536 cv
139.5 78.665 138.627 79.2333 138.438 80.1225 cv
138.436 80.1335 138.433 80.1446 138.431 80.1556 cv
138.253 81.0898 138.191 82.0485 138.131 82.9953 cv
138.071 83.9081 138.764 84.696 139.676 84.7553 cv
140.589 84.8136 141.377 84.1223 141.436 83.2096 cv
141.437 83.1976 141.437 83.1866 141.438 83.1746 cv
cp
141.369 85.5715 mo
141.359 84.7726 141.403 83.972 141.438 83.1746 cv
141.478 82.261 140.77 81.4873 139.856 81.448 cv
138.955 81.4076 138.189 82.0956 138.131 82.9953 cv
138.075 83.86 138.01 84.7288 138.011 85.5959 cv
138.012 86.5239 138.765 87.2751 139.692 87.2733 cv
140.62 87.2724 141.371 86.5196 141.369 85.5925 cv
141.369 85.5855 141.369 85.5785 141.369 85.5715 cv
cp
141.162 87.5981 mo
141.286 86.9316 141.379 86.2514 141.369 85.5705 cv
141.356 84.6436 140.594 83.9025 139.666 83.9154 cv
138.748 83.9281 138.009 84.6768 138.011 85.5959 cv
138.011 86.0529 137.932 86.5109 137.843 86.9579 cv
137.66 87.8731 138.253 88.7632 139.169 88.9465 cv
140.085 89.1288 140.975 88.5353 141.158 87.6201 cv
141.159 87.6131 141.161 87.6051 141.162 87.5981 cv
cp
140.989 88.7992 mo
141 88.398 141.088 87.9919 141.162 87.5981 cv
141.333 86.681 140.728 85.798 139.81 85.6268 cv
138.901 85.4574 138.023 86.0508 137.843 86.9579 cv
137.733 87.5032 137.623 88.0556 137.576 88.6111 cv
137.499 89.5521 138.199 90.377 139.14 90.4539 cv
140.081 90.5309 140.906 89.8312 140.983 88.8902 cv
140.986 88.8602 140.987 88.8302 140.989 88.7992 cv
cp
140.974 89.2744 mo
140.98 89.1163 140.984 88.9583 140.989 88.7992 cv
141.016 87.8558 140.272 87.0695 139.329 87.0425 cv
138.421 87.0161 137.651 87.7062 137.576 88.6111 cv
137.563 88.7703 137.55 88.9285 137.538 89.0876 cv
137.461 90.0356 138.167 90.8664 139.115 90.9433 cv
140.063 91.0201 140.893 90.3134 140.969 89.3664 cv
140.972 89.3354 140.974 89.3054 140.974 89.2744 cv
cp
137.552 89.5005 mo
137.559 89.5404 137.568 89.5793 137.577 89.6182 cv
137.794 90.5447 138.72 91.1199 139.645 90.9041 cv
140.538 90.6946 141.111 89.8228 140.948 88.9207 cv
140.941 88.8817 140.933 88.8418 140.924 88.8029 cv
140.718 87.8743 139.798 87.289 138.869 87.4949 cv
137.961 87.6976 137.376 88.5855 137.552 89.5005 cv
cp
137.533 89.3767 mo
137.533 89.3767 li
137.643 90.3205 138.498 90.9965 139.443 90.8864 cv
140.388 90.7763 141.064 89.9203 140.954 88.9756 cv
140.953 88.9716 140.953 88.9686 140.952 88.9646 cv
140.906 88.6001 140.753 88.2429 140.634 87.8983 cv
140.41 87.2538 140.18 86.6105 139.951 85.9672 cv
139.744 85.3875 139.106 85.086 138.527 85.2928 cv
138.121 85.4366 137.836 85.8009 137.792 86.2275 cv
137.722 86.9073 137.652 87.5862 137.588 88.267 cv
137.554 88.6284 137.49 89.0122 137.533 89.3767 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
179.064 72.5219 mo
179.214 71.9582 179.367 71.3923 179.567 70.844 cv
179.78 70.2594 179.478 69.6119 178.894 69.3988 cv
178.721 69.3358 178.535 69.316 178.353 69.3411 cv
177.154 69.5081 176.37 70.6194 176.068 71.71 cv
175.839 72.5358 176.323 73.3911 177.149 73.6205 cv
177.975 73.8498 178.83 73.3658 179.059 72.539 cv
179.061 72.534 179.062 72.528 179.064 72.5219 cv
cp
178.272 75.2344 mo
178.553 74.3361 178.823 73.4328 179.064 72.5219 cv
179.284 71.6933 178.79 70.8431 177.961 70.6238 cv
177.139 70.4064 176.295 70.8903 176.068 71.71 cv
175.831 72.5659 175.557 73.4111 175.27 74.2515 cv
174.988 75.0769 175.428 75.9748 176.254 76.2571 cv
177.079 76.5395 177.977 76.0989 178.259 75.2736 cv
178.264 75.2605 178.268 75.2475 178.272 75.2344 cv
cp
177.591 77.8156 mo
177.77 76.9434 178.006 76.0836 178.272 75.2344 cv
178.533 74.4023 178.07 73.5157 177.237 73.2554 cv
176.42 72.999 175.548 73.4412 175.27 74.2515 cv
174.943 75.2084 174.659 76.1818 174.455 77.1732 cv
174.278 78.0384 174.836 78.8849 175.702 79.0628 cv
176.567 79.2406 177.413 78.6827 177.591 77.8165 cv
177.591 77.8156 li
cp
177.295 79.9421 mo
177.341 79.2266 177.448 78.5163 177.591 77.8156 cv
177.768 76.9494 177.21 76.1039 176.344 75.927 cv
175.479 75.7502 174.633 76.3081 174.455 77.1732 cv
174.283 78.0133 174.152 78.8639 174.089 79.7207 cv
174.024 80.6055 174.688 81.3758 175.573 81.4414 cv
176.457 81.507 177.229 80.843 177.294 79.9582 cv
177.294 79.9532 177.295 79.9471 177.295 79.9421 cv
cp
176.987 82.9689 mo
177.113 81.9624 177.231 80.9539 177.295 79.9421 cv
177.352 79.0564 176.68 78.2923 175.794 78.2356 cv
174.915 78.1799 174.155 78.8419 174.089 79.7207 cv
174.019 80.6646 173.894 81.6051 173.763 82.5417 cv
173.639 83.4312 174.258 84.253 175.148 84.3776 cv
176.037 84.5012 176.859 83.8815 176.984 82.992 cv
176.985 82.984 176.986 82.977 176.987 82.9689 cv
cp
176.692 86.1196 mo
176.747 85.0659 176.856 84.0155 176.987 82.9689 cv
177.098 82.0776 176.467 81.2649 175.575 81.1534 cv
174.693 81.0437 173.886 81.6612 173.763 82.5417 cv
173.606 83.6706 173.478 84.8042 173.414 85.943 cv
173.363 86.8477 174.056 87.6226 174.962 87.673 cv
175.867 87.7244 176.641 87.0313 176.693 86.1256 cv
176.693 86.1236 176.692 86.1216 176.692 86.1196 cv
cp
176.571 88.8232 mo
176.605 87.9217 176.645 87.0202 176.692 86.1196 cv
176.74 85.214 176.044 84.4421 175.138 84.3947 cv
174.236 84.3473 173.465 85.0393 173.414 85.943 cv
173.364 86.8466 173.309 87.7513 173.251 88.6551 cv
173.191 89.5708 173.886 90.3627 174.802 90.422 cv
175.719 90.4813 176.509 89.787 176.57 88.8712 cv
176.571 88.8552 176.571 88.8392 176.571 88.8232 cv
cp
176.522 90.1908 mo
176.538 89.7346 176.554 89.2794 176.571 88.8232 cv
176.605 87.9057 175.888 87.1341 174.971 87.1008 cv
174.071 87.0684 173.308 87.7574 173.251 88.6551 cv
173.221 89.1104 173.192 89.5658 173.162 90.0212 cv
173.102 90.948 173.804 91.7488 174.732 91.8089 cv
175.659 91.869 176.46 91.1656 176.52 90.2389 cv
176.521 90.2228 176.521 90.2068 176.522 90.1908 cv
cp
176.458 90.5986 mo
176.47 90.5515 176.482 90.5043 176.491 90.4562 cv
176.672 89.544 176.078 88.6599 175.167 88.4796 cv
174.321 88.3125 173.486 88.8113 173.232 89.6353 cv
173.218 89.6815 173.206 89.7287 173.194 89.7768 cv
172.978 90.6804 173.535 91.5889 174.439 91.8053 cv
175.328 92.0179 176.224 91.4824 176.458 90.5986 cv
cp
173.173 90.4601 mo
173.173 90.4601 li
173.335 91.3763 174.208 91.9871 175.123 91.8253 cv
176.038 91.6646 176.65 90.7914 176.488 89.8762 cv
176.487 89.8702 176.486 89.8652 176.485 89.8593 cv
176.411 89.5881 li
176.395 89.5423 176.376 89.4965 176.354 89.4528 cv
176.254 89.2369 176.107 89.0496 175.96 88.8633 cv
175.792 88.6523 175.62 88.4443 175.448 88.2363 cv
175.065 87.7718 174.377 87.7058 173.912 88.0893 cv
173.758 88.2171 173.641 88.3855 173.575 88.5753 cv
173.488 88.8303 173.4 89.0854 173.317 89.3413 cv
173.244 89.5672 173.171 89.7951 173.153 90.0323 cv
173.149 90.0814 173.147 90.1304 173.148 90.1794 cv
cp
f
249.91 92.4601 mo
250.891 93.0716 251.826 93.7607 252.767 94.4317 cv
253.406 94.8872 254.292 94.7389 254.747 94.1005 cv
255.202 93.4631 255.054 92.5768 254.416 92.1212 cv
254.403 92.1124 254.391 92.1035 254.379 92.0957 cv
253.695 91.6397 252.982 91.21 252.22 90.8949 cv
251.628 90.6498 250.962 90.4496 250.315 90.5412 cv
249.743 90.6229 249.348 91.1516 249.429 91.7227 cv
249.473 92.0272 249.649 92.2971 249.91 92.4601 cv
cp
252.756 94.4238 mo
253.502 94.9661 254.258 95.5013 255.056 95.964 cv
255.77 96.3786 256.686 96.1359 257.1 95.422 cv
257.515 94.7081 257.272 93.7929 256.558 93.3782 cv
256.528 93.3616 256.498 93.3449 256.468 93.3303 cv
255.738 92.9708 255.047 92.5319 254.367 92.0878 cv
253.711 91.6595 252.831 91.8448 252.403 92.5009 cv
251.99 93.1337 252.145 93.979 252.756 94.4238 cv
cp
255.056 95.964 mo
255.665 96.3169 256.29 96.6375 256.934 96.922 cv
257.715 97.2679 258.629 96.9142 258.975 96.1331 cv
259.32 95.351 258.967 94.437 258.186 94.0922 cv
258.168 94.0834 258.148 94.0756 258.13 94.0688 cv
257.566 93.8444 257.012 93.5979 256.468 93.3303 cv
255.726 92.9659 254.831 93.2704 254.465 94.0108 cv
254.119 94.7159 254.377 95.5699 255.056 95.964 cv
cp
256.934 96.922 mo
257.243 97.0594 257.558 97.2317 257.789 97.486 cv
258.371 98.1283 259.363 98.1776 260.006 97.5971 cv
260.648 97.0155 260.697 96.0229 260.116 95.3806 cv
260.113 95.3767 260.11 95.3737 260.108 95.3707 cv
259.566 94.782 258.869 94.3612 258.13 94.0688 cv
257.336 93.7531 256.436 94.1417 256.121 94.9364 cv
255.814 95.7091 256.174 96.5859 256.934 96.922 cv
cp
257.789 97.486 mo
257.93 97.6424 258.039 97.8321 258.145 98.0139 cv
258.358 98.3814 258.544 98.7653 258.721 99.1512 cv
259.087 99.948 260.029 100.297 260.826 99.9316 cv
261.623 99.5662 261.973 98.6241 261.607 97.8273 cv
261.603 97.8184 261.598 97.8094 261.594 97.8005 cv
261.187 96.9542 260.748 96.0683 260.108 95.3707 cv
259.521 94.7326 258.529 94.6912 257.891 95.2777 cv
257.256 95.8612 257.211 96.8468 257.789 97.486 cv
cp
258.721 99.1512 mo
259.129 100.039 259.589 100.981 260.301 101.671 cv
260.943 102.294 261.97 102.278 262.592 101.635 cv
263.216 100.993 263.2 99.9668 262.557 99.3433 cv
262.539 99.3255 262.52 99.3087 262.501 99.2919 cv
262.371 99.1774 262.273 99.0176 262.18 98.8737 cv
261.959 98.5313 261.771 98.1674 261.594 97.8005 cv
261.214 97.0099 260.265 96.678 259.475 97.0583 cv
258.696 97.4344 258.361 98.3644 258.721 99.1512 cv
cp
260.301 101.671 mo
260.69 102.048 261 102.513 261.295 102.965 cv
261.793 103.733 262.818 103.951 263.586 103.452 cv
264.353 102.953 264.571 101.928 264.073 101.162 cv
264.064 101.149 264.056 101.136 264.046 101.123 cv
263.595 100.467 263.101 99.8209 262.501 99.2919 cv
261.83 98.6998 260.806 98.7638 260.213 99.4358 cv
259.641 100.085 259.68 101.068 260.301 101.671 cv
cp
261.295 102.965 mo
261.788 103.724 262.342 104.443 262.96 105.104 cv
263.596 105.784 264.662 105.819 265.343 105.182 cv
266.023 104.546 266.057 103.48 265.421 102.8 cv
265.413 102.792 265.405 102.783 265.397 102.775 cv
264.9 102.265 264.451 101.709 264.046 101.123 cv
263.528 100.37 262.496 100.181 261.743 100.7 cv
261.005 101.209 260.806 102.213 261.295 102.965 cv
cp
262.96 105.104 mo
263.355 105.526 263.733 105.973 264.041 106.463 cv
264.54 107.261 265.592 107.502 266.389 107.002 cv
267.187 106.502 267.427 105.451 266.928 104.653 cv
266.924 104.646 266.92 104.64 266.916 104.634 cv
266.481 103.961 265.957 103.348 265.397 102.775 cv
264.747 102.109 263.68 102.095 263.013 102.745 cv
262.357 103.386 262.333 104.434 262.96 105.104 cv
cp
264.041 106.463 mo
264.261 106.815 264.445 107.19 264.631 107.559 cv
264.987 108.266 265.327 108.982 265.662 109.7 cv
266.069 110.57 267.104 110.945 267.973 110.538 cv
268.843 110.131 269.218 109.096 268.811 108.227 cv
268.807 108.217 268.802 108.206 268.797 108.196 cv
268.433 107.456 268.065 106.718 267.682 105.99 cv
267.44 105.53 267.197 105.069 266.916 104.634 cv
266.404 103.843 265.35 103.617 264.56 104.127 cv
263.777 104.633 263.546 105.674 264.041 106.463 cv
cp
265.662 109.7 mo
266.252 110.961 266.837 112.228 267.478 113.464 cv
267.929 114.335 269.002 114.675 269.872 114.222 cv
270.743 113.771 271.082 112.698 270.631 111.827 cv
270.627 111.819 270.622 111.812 270.618 111.804 cv
269.979 110.618 269.391 109.404 268.797 108.196 cv
268.372 107.335 267.331 106.98 266.469 107.403 cv
265.62 107.821 265.261 108.842 265.662 109.7 cv
cp
267.478 113.464 mo
267.893 114.263 268.205 115.115 268.495 115.966 cv
268.813 116.901 269.829 117.4 270.765 117.082 cv
271.7 116.763 272.199 115.746 271.881 114.811 cv
271.88 114.809 271.879 114.807 271.878 114.804 cv
271.525 113.78 271.133 112.759 270.618 111.804 cv
270.153 110.94 269.076 110.617 268.212 111.082 cv
267.358 111.543 267.031 112.603 267.478 113.464 cv
cp
268.495 115.966 mo
268.89 117.128 269.36 118.268 269.922 119.361 cv
270.377 120.247 271.465 120.596 272.351 120.141 cv
273.237 119.685 273.587 118.598 273.131 117.711 cv
273.127 117.705 273.123 117.697 273.119 117.69 cv
272.627 116.764 272.221 115.795 271.878 114.804 cv
271.556 113.871 270.537 113.375 269.603 113.698 cv
268.672 114.02 268.177 115.033 268.495 115.966 cv
cp
269.922 119.361 mo
270.405 120.301 270.815 121.278 271.17 122.273 cv
271.509 123.226 272.556 123.723 273.508 123.383 cv
274.46 123.044 274.958 121.997 274.619 121.045 cv
274.615 121.036 274.611 121.026 274.608 121.016 cv
274.182 119.878 273.691 118.763 273.119 117.69 cv
272.652 116.81 271.559 116.476 270.679 116.943 cv
269.809 117.406 269.471 118.483 269.922 119.361 cv
cp
271.17 122.273 mo
271.514 123.241 271.865 124.207 272.241 125.164 cv
272.613 126.116 273.686 126.586 274.638 126.212 cv
275.589 125.84 276.059 124.768 275.686 123.816 cv
275.685 123.811 275.683 123.806 275.681 123.802 cv
275.311 122.878 274.957 121.948 274.608 121.016 cv
274.253 120.07 273.198 119.591 272.251 119.945 cv
271.317 120.296 270.835 121.332 271.17 122.273 cv
cp
272.241 125.164 mo
272.561 125.985 272.77 126.848 272.945 127.709 cv
272.946 127.71 li
273.15 128.715 274.13 129.363 275.135 129.16 cv
276.139 128.956 276.788 127.975 276.584 126.971 cv
276.584 126.971 276.584 126.97 276.584 126.969 cv
276.364 125.893 276.09 124.822 275.681 123.802 cv
275.301 122.853 274.224 122.392 273.276 122.772 cv
272.332 123.15 271.871 124.218 272.241 125.164 cv
cp
272.946 127.71 mo
273.16 128.764 273.416 129.815 273.788 130.825 cv
274.142 131.789 275.211 132.284 276.176 131.93 cv
277.141 131.575 277.636 130.506 277.281 129.542 cv
277.28 129.539 277.279 129.535 277.278 129.532 cv
276.967 128.702 276.761 127.835 276.584 126.969 cv
276.378 125.964 275.398 125.316 274.393 125.521 cv
273.389 125.727 272.742 126.706 272.946 127.71 cv
cp
273.788 130.825 mo
273.996 131.391 274.18 131.971 274.286 132.566 cv
274.468 133.58 275.437 134.254 276.452 134.073 cv
277.466 133.891 278.14 132.921 277.958 131.907 cv
277.958 131.906 277.958 131.905 277.958 131.904 cv
277.81 131.093 277.566 130.302 277.278 129.532 cv
276.918 128.569 275.846 128.08 274.883 128.44 cv
273.924 128.799 273.435 129.864 273.788 130.825 cv
cp
274.286 132.566 mo
274.407 133.24 274.477 133.924 274.532 134.606 cv
274.616 135.633 275.517 136.399 276.544 136.315 cv
277.572 136.232 278.337 135.332 278.253 134.303 cv
278.188 133.5 278.101 132.697 277.958 131.904 cv
277.774 130.89 276.803 130.217 275.789 130.401 cv
274.776 130.585 274.105 131.553 274.286 132.566 cv
cp
274.532 134.606 mo
274.627 135.772 274.934 136.915 275.333 138.01 cv
275.69 138.99 276.774 139.494 277.754 139.137 cv
278.733 138.779 279.237 137.696 278.879 136.716 cv
278.874 136.702 278.869 136.687 278.863 136.673 cv
278.566 135.916 278.32 135.119 278.253 134.303 cv
278.17 133.275 277.269 132.511 276.241 132.595 cv
275.214 132.678 274.449 133.579 274.532 134.606 cv
cp
275.333 138.01 mo
275.62 138.796 275.883 139.603 276.018 140.43 cv
276.187 141.473 277.17 142.182 278.214 142.012 cv
279.258 141.842 279.966 140.859 279.796 139.816 cv
279.795 139.81 279.794 139.805 279.793 139.799 cv
279.608 138.726 279.26 137.684 278.863 136.673 cv
278.483 135.703 277.387 135.226 276.416 135.606 cv
275.463 135.981 274.982 137.048 275.333 138.01 cv
cp
276.018 140.43 mo
276.14 141.181 276.252 141.933 276.354 142.686 cv
276.498 143.742 277.469 144.48 278.524 144.337 cv
279.578 144.194 280.318 143.222 280.174 142.167 cv
280.172 142.158 280.171 142.15 280.17 142.141 cv
280.053 141.359 279.927 140.578 279.793 139.799 cv
279.613 138.757 278.624 138.057 277.582 138.237 cv
276.547 138.415 275.85 139.394 276.018 140.43 cv
cp
276.354 142.686 mo
276.442 143.328 276.534 143.971 276.68 144.603 cv
276.923 145.652 277.97 146.307 279.02 146.063 cv
280.069 145.821 280.723 144.773 280.481 143.724 cv
280.473 143.692 280.465 143.66 280.457 143.629 cv
280.318 143.145 280.245 142.639 280.17 142.141 cv
280.013 141.088 279.031 140.364 277.979 140.521 cv
276.936 140.677 276.213 141.642 276.354 142.686 cv
cp
276.68 144.603 mo
276.831 145.259 277.121 145.878 277.507 146.429 cv
278.134 147.32 279.364 147.535 280.256 146.909 cv
281.148 146.282 281.362 145.052 280.736 144.16 cv
280.728 144.148 280.719 144.136 280.71 144.125 cv
280.601 143.975 280.508 143.81 280.457 143.629 cv
280.161 142.594 279.082 141.992 278.046 142.287 cv
277.047 142.572 276.446 143.59 276.68 144.603 cv
cp
277.507 146.429 mo
277.483 146.393 277.505 146.428 277.512 146.446 cv
277.541 146.509 277.564 146.575 277.586 146.641 cv
277.676 146.923 277.732 147.216 277.781 147.508 cv
277.96 148.588 278.98 149.318 280.059 149.138 cv
281.139 148.96 281.869 147.94 281.69 146.86 cv
281.69 146.859 281.689 146.858 281.689 146.857 cv
281.531 145.909 281.29 144.912 280.71 144.124 cv
280.065 143.247 278.83 143.059 277.952 143.706 cv
277.088 144.341 276.891 145.551 277.507 146.429 cv
cp
277.781 147.508 mo
277.883 148.126 277.985 148.75 278.012 149.376 cv
278.056 150.46 278.971 151.301 280.054 151.255 cv
281.096 151.212 281.922 150.359 281.934 149.316 cv
281.943 148.492 281.825 147.667 281.689 146.857 cv
281.509 145.778 280.488 145.049 279.408 145.23 cv
278.33 145.41 277.602 146.43 277.781 147.508 cv
cp
278.012 149.377 mo
278.051 150.319 278.356 151.242 278.688 152.115 cv
279.069 153.117 280.188 153.62 281.188 153.239 cv
282.186 152.861 282.689 151.748 282.316 150.749 cv
282.195 150.426 282.083 150.098 282.004 149.761 cv
281.97 149.618 281.933 149.465 281.934 149.316 cv
281.946 148.232 281.077 147.344 279.993 147.333 cv
278.91 147.322 278.022 148.19 278.01 149.274 cv
278.009 149.308 278.01 149.342 278.012 149.377 cv
cp
278.688 152.115 mo
278.816 152.451 278.953 152.785 279.117 153.104 cv
279.374 153.598 279.72 154.062 280.27 154.254 cv
280.37 154.289 280.475 154.314 280.58 154.327 cv
281.315 154.426 281.996 153.997 282.334 153.365 cv
282.501 153.052 282.586 152.7 282.604 152.348 cv
282.631 151.801 282.506 151.258 282.316 150.749 cv
281.941 149.746 280.824 149.237 279.822 149.612 cv
278.819 149.987 278.31 151.104 278.685 152.106 cv
278.686 152.109 278.687 152.112 278.688 152.115 cv
cp
f
281.646 153.98 mo
281.81 153.766 282.002 153.557 282.258 153.458 cv
282.752 153.268 282.997 152.714 282.807 152.22 cv
282.707 151.961 282.498 151.757 282.237 151.663 cv
281.306 151.329 280.323 151.741 279.731 152.491 cv
279.315 153.017 279.404 153.78 279.93 154.195 cv
280.456 154.611 281.219 154.522 281.634 153.996 cv
281.638 153.991 281.642 153.985 281.646 153.98 cv
cp
280.828 155.308 mo
281.061 154.842 281.33 154.393 281.646 153.98 cv
282.053 153.447 281.951 152.686 281.418 152.279 cv
280.893 151.877 280.141 151.972 279.731 152.491 cv
279.317 153.015 278.955 153.577 278.636 154.163 cv
278.309 154.763 278.531 155.514 279.131 155.841 cv
279.73 156.167 280.481 155.946 280.808 155.346 cv
280.815 155.333 280.822 155.321 280.828 155.308 cv
cp
279.913 157.663 mo
280.179 156.867 280.453 156.06 280.828 155.308 cv
281.134 154.698 280.886 153.954 280.275 153.649 cv
279.68 153.351 278.954 153.578 278.636 154.163 cv
278.179 155.001 277.823 155.894 277.477 156.783 cv
277.219 157.45 277.549 158.201 278.216 158.459 cv
278.883 158.718 279.634 158.387 279.892 157.721 cv
279.9 157.701 279.907 157.682 279.913 157.663 cv
cp
279.282 160.089 mo
279.39 159.261 279.651 158.45 279.913 157.663 cv
280.14 156.984 279.774 156.25 279.095 156.024 cv
278.44 155.804 277.727 156.139 277.477 156.783 cv
277.11 157.73 276.764 158.71 276.616 159.719 cv
276.509 160.454 277.017 161.137 277.752 161.245 cv
278.488 161.353 279.171 160.844 279.279 160.109 cv
279.28 160.102 279.281 160.095 279.282 160.089 cv
cp
278.754 162.606 mo
278.978 161.778 279.171 160.939 279.282 160.089 cv
279.378 159.351 278.859 158.675 278.122 158.58 cv
277.393 158.485 276.723 158.992 276.616 159.719 cv
276.509 160.453 276.334 161.178 276.139 161.895 cv
275.941 162.616 276.366 163.362 277.088 163.56 cv
277.81 163.756 278.556 163.331 278.753 162.609 cv
278.753 162.608 278.753 162.607 278.754 162.606 cv
cp
278.46 165.568 mo
278.45 164.58 278.494 163.564 278.754 162.606 cv
278.95 161.884 278.522 161.14 277.8 160.944 cv
277.078 160.748 276.335 161.174 276.139 161.895 cv
275.818 163.068 275.685 164.291 275.618 165.503 cv
275.575 166.286 276.175 166.957 276.96 167 cv
277.743 167.044 278.414 166.443 278.457 165.66 cv
278.46 165.629 278.46 165.599 278.46 165.568 cv
cp
275.982 169.177 mo
275.982 169.177 li
276.263 169.97 277.133 170.384 277.926 170.103 cv
278.718 169.822 279.133 168.952 278.851 168.159 cv
278.841 168.13 278.83 168.101 278.817 168.074 cv
278.69 167.772 278.622 167.446 278.571 167.124 cv
278.491 166.609 278.465 166.088 278.46 165.568 cv
278.452 164.783 277.809 164.152 277.024 164.159 cv
276.274 164.167 275.659 164.754 275.618 165.503 cv
275.55 166.724 275.568 168.012 275.982 169.177 cv
cp
275.982 169.177 mo
276.267 169.978 276.639 170.753 277.138 171.443 cv
277.647 172.148 278.631 172.306 279.336 171.797 cv
280.04 171.287 280.199 170.303 279.689 169.598 cv
279.678 169.584 279.667 169.57 279.656 169.555 cv
279.306 169.106 279.039 168.596 278.818 168.074 cv
278.817 168.074 li
278.489 167.299 277.595 166.939 276.822 167.267 cv
276.081 167.582 275.713 168.419 275.982 169.177 cv
cp
277.138 171.443 mo
277.411 171.822 277.771 172.149 278.211 172.322 cv
278.523 172.443 278.866 172.483 279.195 172.416 cv
279.759 172.302 280.237 171.87 280.353 171.296 cv
280.385 171.133 280.388 170.966 280.36 170.804 cv
280.281 170.329 279.943 169.924 279.656 169.555 cv
279.123 168.868 278.133 168.745 277.447 169.278 cv
276.777 169.799 276.641 170.756 277.138 171.443 cv
cp
f
282.059 154.698 mo
282.623 154.588 283.073 155.063 283.417 155.444 cv
283.998 156.086 284.989 156.136 285.632 155.556 cv
286.275 154.975 286.324 153.983 285.744 153.341 cv
285.729 153.325 285.714 153.309 285.698 153.293 cv
285.073 152.657 284.279 152.147 283.378 152.036 cv
282.54 151.933 281.711 152.209 281.09 152.778 cv
280.635 153.194 280.603 153.9 281.019 154.356 cv
281.283 154.644 281.676 154.774 282.059 154.698 cv
cp
283.407 155.433 mo
283.836 155.916 284.258 156.426 284.565 156.996 cv
284.992 157.784 285.975 158.078 286.763 157.653 cv
287.551 157.226 287.845 156.243 287.42 155.455 cv
287.413 155.444 287.407 155.432 287.401 155.421 cv
286.947 154.626 286.334 153.927 285.688 153.283 cv
285.075 152.671 284.083 152.672 283.471 153.285 cv
282.886 153.872 282.858 154.812 283.407 155.433 cv
cp
284.565 156.996 mo
284.823 157.472 285.071 157.954 285.3 158.445 cv
285.683 159.261 286.655 159.613 287.472 159.23 cv
288.288 158.848 288.64 157.876 288.257 157.059 cv
287.996 156.501 287.706 155.956 287.401 155.421 cv
286.957 154.643 285.966 154.373 285.188 154.817 cv
284.424 155.254 284.147 156.221 284.565 156.996 cv
cp
285.3 158.445 mo
285.539 158.955 285.81 159.451 286.13 159.915 cv
286.641 160.657 287.657 160.844 288.399 160.333 cv
289.138 159.824 289.326 158.814 288.821 158.071 cv
288.604 157.752 288.422 157.409 288.257 157.059 cv
287.875 156.242 286.903 155.89 286.086 156.273 cv
285.27 156.656 284.918 157.628 285.3 158.445 cv
cp
286.13 159.915 mo
286.106 159.881 286.121 159.901 286.13 159.926 cv
286.154 159.988 286.17 160.053 286.185 160.116 cv
286.246 160.38 286.271 160.652 286.288 160.922 cv
286.342 161.822 287.116 162.507 288.016 162.451 cv
288.914 162.397 289.599 161.624 289.544 160.724 cv
289.544 160.722 289.544 160.721 289.544 160.719 cv
289.487 159.813 289.344 158.839 288.821 158.071 cv
288.315 157.327 287.3 157.134 286.555 157.642 cv
285.811 158.149 285.618 159.163 286.125 159.908 cv
286.127 159.91 286.129 159.913 286.13 159.915 cv
cp
286.288 160.922 mo
286.356 162.031 286.379 163.142 286.396 164.253 cv
286.409 165.152 287.148 165.87 288.046 165.856 cv
288.94 165.844 289.657 165.11 289.649 164.215 cv
289.639 163.05 289.619 161.882 289.544 160.719 cv
289.487 159.82 288.712 159.138 287.812 159.195 cv
286.915 159.253 286.233 160.025 286.288 160.922 cv
cp
289.468 167.334 mo
289.572 166.913 289.601 166.473 289.623 166.041 cv
289.653 165.433 289.654 164.824 289.649 164.215 cv
289.641 163.317 288.906 162.595 288.008 162.602 cv
287.109 162.61 286.388 163.345 286.395 164.243 cv
286.396 164.247 286.396 164.25 286.396 164.253 cv
286.404 164.815 286.409 165.376 286.401 165.938 cv
286.398 166.217 286.397 166.5 286.366 166.779 cv
286.268 167.645 286.893 168.426 287.759 168.524 cv
288.546 168.611 289.277 168.103 289.468 167.334 cv
cp
288.837 168.9 mo
289.118 168.411 289.331 167.882 289.468 167.334 cv
289.677 166.488 289.161 165.632 288.314 165.422 cv
287.469 165.212 286.612 165.728 286.403 166.574 cv
286.386 166.641 286.373 166.71 286.366 166.779 cv
286.341 167.001 286.271 167.218 286.166 167.415 cv
285.765 168.159 286.044 169.086 286.788 169.485 cv
287.517 169.877 288.426 169.618 288.837 168.9 cv
cp
286.989 170.837 mo
287.668 170.281 288.394 169.672 288.837 168.9 cv
289.258 168.168 289.005 167.234 288.273 166.813 cv
287.541 166.393 286.607 166.646 286.186 167.378 cv
286.179 167.39 286.173 167.403 286.166 167.415 cv
286.1 167.536 285.984 167.647 285.889 167.746 cv
285.631 168.014 285.349 168.26 285.062 168.496 cv
284.417 169.03 284.327 169.986 284.86 170.631 cv
285.393 171.273 286.343 171.365 286.989 170.837 cv
cp
284.981 172.381 mo
285.675 171.901 286.336 171.371 286.989 170.837 cv
287.637 170.306 287.731 169.352 287.201 168.704 cv
286.671 168.056 285.716 167.96 285.068 168.491 cv
285.066 168.493 285.064 168.494 285.062 168.496 cv
284.472 168.984 283.877 169.47 283.252 169.914 cv
282.573 170.395 282.414 171.336 282.895 172.014 cv
283.373 172.686 284.302 172.85 284.981 172.381 cv
cp
283.486 173.274 mo
284.01 173.023 284.504 172.711 284.981 172.381 cv
285.664 171.908 285.836 170.97 285.363 170.286 cv
284.89 169.601 283.951 169.43 283.268 169.903 cv
283.262 169.906 283.257 169.91 283.252 169.914 cv
282.943 170.133 282.619 170.348 282.265 170.489 cv
281.486 170.8 281.105 171.685 281.417 172.465 cv
281.728 173.245 282.613 173.625 283.394 173.314 cv
283.424 173.302 283.455 173.288 283.486 173.274 cv
cp
281.838 173.685 mo
282.412 173.69 282.972 173.52 283.486 173.274 cv
284.244 172.911 284.564 172.003 284.201 171.245 cv
283.856 170.522 283.01 170.192 282.265 170.489 cv
282.2 170.515 282.133 170.539 282.063 170.555 cv
281.987 170.574 281.953 170.562 281.863 170.562 cv
281 170.554 280.295 171.248 280.288 172.11 cv
280.281 172.973 280.975 173.678 281.838 173.685 cv
cp
280.042 173.035 mo
280.561 173.424 281.183 173.68 281.838 173.685 cv
282.7 173.692 283.405 172.999 283.412 172.137 cv
283.419 171.334 282.815 170.656 282.016 170.57 cv
282.041 170.573 282.033 170.574 282.014 170.565 cv
281.963 170.543 281.916 170.513 281.87 170.482 cv
281.154 169.993 280.177 170.177 279.687 170.893 cv
279.214 171.588 279.37 172.531 280.042 173.035 cv
cp
280.051 173.042 mo
280.051 173.042 li
280.748 173.557 281.732 173.409 282.247 172.712 cv
282.763 172.015 282.616 171.032 281.918 170.516 cv
281.905 170.506 281.892 170.497 281.878 170.488 cv
281.594 170.291 281.436 169.906 281.308 169.602 cv
281.092 169.087 280.499 168.846 279.985 169.062 cv
279.76 169.156 279.576 169.329 279.468 169.549 cv
279.227 170.043 279.07 170.585 279.086 171.139 cv
279.106 171.883 279.449 172.596 280.051 173.042 cv
cp
f
282.318 158.163 mo
282.402 157.859 282.509 157.552 282.678 157.284 cv
282.773 157.133 282.893 156.99 283.052 156.902 cv
283.398 156.711 283.524 156.275 283.333 155.93 cv
283.166 155.629 282.81 155.488 282.483 155.595 cv
281.569 155.893 281.006 156.754 280.665 157.605 cv
280.487 158.052 280.704 158.561 281.152 158.74 cv
281.599 158.919 282.107 158.702 282.287 158.254 cv
282.299 158.224 282.309 158.194 282.318 158.163 cv
cp
282.034 161.087 mo
282.061 160.47 282.096 159.852 282.158 159.239 cv
282.194 158.87 282.235 158.499 282.325 158.139 cv
282.44 157.67 282.154 157.198 281.685 157.081 cv
281.272 156.979 280.845 157.191 280.675 157.582 cv
280.487 158.016 280.373 158.484 280.275 158.945 cv
280.137 159.594 280.039 160.252 279.956 160.91 cv
279.883 161.481 280.287 162.005 280.86 162.077 cv
281.432 162.15 281.954 161.746 282.027 161.173 cv
282.031 161.145 282.034 161.116 282.034 161.086 cv
cp
281.741 164.621 mo
281.926 163.454 281.984 162.265 282.034 161.087 cv
282.059 160.511 281.613 160.023 281.036 159.999 cv
280.494 159.975 280.025 160.371 279.956 160.91 cv
279.813 162.028 279.669 163.148 279.491 164.261 cv
279.392 164.882 279.813 165.467 280.435 165.566 cv
281.056 165.666 281.641 165.243 281.741 164.622 cv
281.741 164.621 li
cp
281.284 166.916 mo
281.469 166.158 281.618 165.391 281.741 164.621 cv
281.839 164 281.415 163.416 280.794 163.317 cv
280.174 163.218 279.59 163.641 279.491 164.261 cv
279.377 164.972 279.239 165.678 279.068 166.377 cv
278.92 166.989 279.295 167.606 279.907 167.755 cv
280.519 167.903 281.135 167.528 281.284 166.916 cv
cp
280.946 168.784 mo
281.017 168.156 281.134 167.531 281.284 166.916 cv
281.432 166.305 281.057 165.688 280.445 165.539 cv
279.834 165.39 279.217 165.766 279.068 166.377 cv
278.893 167.097 278.767 167.83 278.708 168.569 cv
278.657 169.188 279.118 169.731 279.738 169.781 cv
280.344 169.83 280.878 169.389 280.946 168.784 cv
cp
280.58 170.459 mo
280.58 170.459 li
281.126 170.208 281.366 169.564 281.115 169.018 cv
281.072 168.925 281.017 168.839 280.95 168.761 cv
280.949 168.762 li
281.006 168.144 280.55 167.596 279.932 167.539 cv
279.313 167.483 278.765 167.938 278.709 168.557 cv
278.708 168.561 278.708 168.565 278.708 168.569 cv
278.674 168.97 278.676 169.394 278.834 169.772 cv
278.979 170.119 279.258 170.4 279.617 170.521 cv
279.933 170.627 280.279 170.597 280.58 170.459 cv
cp
280.58 170.459 mo
281.162 170.192 281.542 169.642 281.813 169.082 cv
282.064 168.561 281.845 167.935 281.324 167.684 cv
280.821 167.441 280.215 167.637 279.949 168.129 cv
279.891 168.237 279.827 168.346 279.744 168.438 cv
279.733 168.451 279.722 168.464 279.708 168.475 cv
279.731 168.457 279.803 168.423 279.673 168.482 cv
279.127 168.734 278.888 169.379 279.139 169.925 cv
279.389 170.471 280.034 170.71 280.58 170.459 cv
cp
281.813 169.082 mo
281.986 168.723 282.105 168.339 282.209 167.956 cv
282.344 167.452 282.449 166.941 282.542 166.428 cv
282.642 165.873 282.274 165.342 281.719 165.241 cv
281.168 165.141 280.638 165.504 280.533 166.055 cv
280.448 166.506 280.351 166.957 280.222 167.399 cv
280.15 167.647 280.073 167.901 279.949 168.129 cv
279.95 168.129 li
279.674 168.637 279.863 169.272 280.371 169.548 cv
280.881 169.823 281.515 169.634 281.79 169.126 cv
281.798 169.111 281.806 169.096 281.813 169.082 cv
cp
282.542 166.428 mo
282.773 165.152 282.908 163.859 282.986 162.564 cv
283.019 162.01 282.596 161.533 282.042 161.5 cv
281.49 161.467 281.016 161.885 280.978 162.437 cv
280.896 163.649 280.761 164.86 280.533 166.055 cv
280.428 166.609 280.791 167.143 281.345 167.249 cv
281.9 167.354 282.434 166.991 282.54 166.437 cv
282.541 166.434 282.541 166.431 282.542 166.428 cv
cp
282.986 162.564 mo
283.063 161.273 283.1 159.979 283.072 158.685 cv
283.06 158.146 282.613 157.718 282.074 157.731 cv
281.544 157.742 281.12 158.174 281.118 158.704 cv
281.115 159.949 281.061 161.195 280.978 162.437 cv
280.94 162.991 281.36 163.47 281.915 163.508 cv
282.468 163.545 282.948 163.126 282.986 162.571 cv
282.986 162.569 282.986 162.567 282.986 162.564 cv
cp
280.977 156.671 mo
281.046 156.879 281.059 157.11 281.076 157.325 cv
281.113 157.784 281.12 158.245 281.118 158.704 cv
281.117 159.244 281.553 159.682 282.093 159.683 cv
282.632 159.685 283.071 159.249 283.071 158.709 cv
283.072 158.701 283.072 158.693 283.072 158.685 cv
283.06 158.179 283.042 157.673 283.001 157.169 cv
282.973 156.819 282.938 156.464 282.851 156.123 cv
282.718 155.601 282.186 155.285 281.664 155.418 cv
281.14 155.551 280.825 156.083 280.958 156.606 cv
280.963 156.628 280.97 156.649 280.977 156.671 cv
cp
280.938 156.574 mo
280.954 156.606 280.966 156.638 280.977 156.671 cv
281.146 157.183 281.7 157.461 282.212 157.292 cv
282.698 157.13 282.977 156.621 282.851 156.123 cv
282.718 155.6 282.479 155.09 282.049 154.745 cv
281.583 154.372 280.904 154.447 280.531 154.912 cv
280.158 155.377 280.233 156.057 280.699 156.43 cv
280.771 156.489 280.852 156.537 280.938 156.575 cv
cp
281.782 156.906 mo
281.82 156.777 281.862 156.648 281.91 156.521 cv
281.911 156.523 li
282.427 156.227 282.607 155.567 282.31 155.051 cv
282.242 154.933 282.154 154.829 282.049 154.745 cv
281.724 154.484 281.289 154.396 280.887 154.507 cv
280.599 154.588 280.347 154.764 280.152 154.988 cv
279.852 155.331 279.672 155.769 279.529 156.196 cv
279.322 156.815 279.656 157.485 280.274 157.692 cv
280.894 157.898 281.563 157.565 281.77 156.945 cv
281.774 156.932 281.778 156.919 281.782 156.906 cv
cp
281.28 159.127 mo
281.398 158.377 281.567 157.635 281.782 156.906 cv
281.967 156.281 281.61 155.623 280.984 155.438 cv
280.374 155.257 279.731 155.593 279.529 156.196 cv
279.252 157.024 279.037 157.871 278.888 158.731 cv
278.773 159.39 279.216 160.018 279.875 160.132 cv
280.534 160.248 281.162 159.805 281.277 159.146 cv
281.278 159.14 281.279 159.133 281.28 159.127 cv
cp
280.999 161.487 mo
281.065 160.698 281.157 159.909 281.28 159.127 cv
281.384 158.466 280.932 157.845 280.271 157.741 cv
279.618 157.637 279.002 158.079 278.888 158.73 cv
278.741 159.574 278.63 160.422 278.553 161.274 cv
278.491 161.95 278.988 162.547 279.664 162.609 cv
280.339 162.67 280.937 162.173 280.998 161.498 cv
280.999 161.494 280.999 161.49 280.999 161.487 cv
cp
280.915 164.066 mo
280.906 163.206 280.928 162.344 280.999 161.487 cv
281.055 160.812 280.552 160.219 279.876 160.162 cv
279.205 160.107 278.614 160.603 278.553 161.274 cv
278.467 162.208 278.436 163.146 278.439 164.083 cv
278.442 164.767 278.999 165.318 279.682 165.316 cv
280.366 165.313 280.917 164.757 280.915 164.074 cv
280.915 164.071 280.915 164.069 280.915 164.066 cv
cp
278.656 166.34 mo
278.656 166.34 li
278.878 166.988 279.585 167.332 280.233 167.109 cv
280.878 166.886 281.223 166.184 281.003 165.538 cv
281.009 165.554 280.989 165.46 280.987 165.44 cv
280.972 165.337 280.962 165.234 280.954 165.13 cv
280.925 164.776 280.918 164.421 280.915 164.066 cv
280.908 163.383 280.349 162.833 279.665 162.84 cv
278.985 162.847 278.437 163.403 278.439 164.083 cv
278.441 164.51 278.449 164.938 278.483 165.363 cv
278.509 165.692 278.547 166.027 278.656 166.34 cv
cp
278.656 166.34 mo
278.799 166.758 279.089 167.12 279.485 167.324 cv
279.857 167.514 280.286 167.548 280.691 167.463 cv
281.36 167.324 281.789 166.667 281.649 165.999 cv
281.547 165.516 281.17 165.14 280.686 165.04 cv
280.687 165.04 li
280.194 164.566 279.408 164.581 278.934 165.076 cv
278.611 165.412 278.503 165.9 278.656 166.34 cv
cp
280.691 167.463 mo
281.721 167.247 282.213 166.166 282.529 165.273 cv
282.752 164.645 282.423 163.956 281.795 163.733 cv
281.186 163.516 280.514 163.82 280.273 164.421 cv
280.175 164.664 280.07 164.911 279.922 165.129 cv
279.921 165.128 li
279.301 165.413 279.028 166.148 279.314 166.768 cv
279.554 167.293 280.126 167.581 280.691 167.463 cv
cp
282.529 165.273 mo
282.859 164.341 283.113 163.381 283.291 162.408 cv
283.404 161.785 282.991 161.188 282.369 161.074 cv
281.767 160.965 281.184 161.348 281.047 161.945 cv
280.852 162.788 280.595 163.617 280.273 164.421 cv
280.024 165.039 280.325 165.742 280.943 165.989 cv
281.562 166.238 282.264 165.938 282.512 165.319 cv
282.518 165.304 282.523 165.289 282.529 165.273 cv
cp
283.291 162.408 mo
283.488 161.322 283.655 160.231 283.81 159.138 cv
283.893 158.54 283.477 157.987 282.879 157.903 cv
282.291 157.82 281.744 158.223 281.648 158.81 cv
281.477 159.86 281.286 160.908 281.047 161.945 cv
280.904 162.562 281.29 163.176 281.906 163.318 cv
282.523 163.461 283.138 163.075 283.279 162.459 cv
283.283 162.442 283.287 162.425 283.291 162.408 cv
cp
283.81 159.138 mo
283.935 158.249 284.077 157.343 284.085 156.443 cv
284.09 155.848 283.611 155.361 283.015 155.356 cv
282.42 155.351 281.934 155.83 281.929 156.425 cv
281.929 156.43 281.929 156.435 281.929 156.439 cv
281.93 156.729 281.897 157.02 281.864 157.307 cv
281.806 157.81 281.729 158.311 281.648 158.81 cv
281.551 159.406 281.955 159.968 282.551 160.065 cv
283.147 160.162 283.709 159.758 283.806 159.161 cv
283.808 159.153 283.809 159.146 283.81 159.138 cv
cp
282.027 156.884 mo
282.027 156.884 li
282.275 157.425 282.915 157.663 283.456 157.414 cv
283.836 157.24 284.082 156.861 284.085 156.443 cv
284.088 156.022 284 155.592 283.735 155.253 cv
283.398 154.822 282.852 154.645 282.319 154.719 cv
281.699 154.803 281.264 155.374 281.349 155.995 cv
281.402 156.39 281.66 156.728 282.028 156.884 cv
cp
282.642 157.341 mo
282.702 157.199 282.768 157.055 282.86 156.932 cv
282.872 156.915 282.887 156.893 282.904 156.881 cv
282.882 156.897 282.805 156.93 282.899 156.892 cv
283.479 156.655 283.758 155.994 283.522 155.413 cv
283.327 154.935 282.832 154.649 282.319 154.719 cv
281.42 154.841 280.809 155.579 280.439 156.352 cv
280.152 156.954 280.406 157.675 281.009 157.963 cv
281.611 158.25 282.332 157.996 282.619 157.393 cv
282.628 157.376 282.636 157.358 282.642 157.341 cv
cp
281.937 159.595 mo
282.128 158.833 282.338 158.066 282.642 157.341 cv
282.901 156.726 282.612 156.018 281.997 155.759 cv
281.403 155.509 280.717 155.77 280.44 156.352 cv
280.04 157.186 279.767 158.08 279.527 158.97 cv
279.349 159.635 279.743 160.317 280.407 160.495 cv
281.071 160.674 281.754 160.279 281.932 159.615 cv
281.934 159.608 281.936 159.602 281.937 159.595 cv
cp
281.351 162.541 mo
281.499 161.551 281.694 160.567 281.937 159.595 cv
282.104 158.928 281.699 158.252 281.032 158.086 cv
280.373 157.921 279.704 158.314 279.527 158.97 cv
279.246 160.022 279.022 161.09 278.859 162.167 cv
278.754 162.855 279.227 163.497 279.916 163.601 cv
280.604 163.706 281.246 163.233 281.35 162.544 cv
281.351 162.543 281.351 162.542 281.351 162.541 cv
cp
281.1 166.752 mo
281.117 165.349 281.145 163.93 281.351 162.541 cv
281.453 161.852 280.979 161.212 280.289 161.11 cv
279.603 161.007 278.963 161.48 278.859 162.167 cv
278.63 163.669 278.593 165.203 278.575 166.72 cv
278.566 167.417 279.125 167.99 279.822 167.999 cv
280.519 168.006 281.092 167.449 281.1 166.752 cv
cp
279.378 170.816 mo
279.378 170.816 li
279.938 171.219 280.717 171.092 281.121 170.534 cv
281.408 170.134 281.435 169.603 281.188 169.178 cv
281.137 168.893 281.124 168.6 281.113 168.311 cv
281.093 167.792 281.094 167.271 281.1 166.752 cv
281.108 166.053 280.55 165.482 279.853 165.473 cv
279.155 165.464 278.583 166.023 278.575 166.72 cv
278.565 167.49 278.563 168.266 278.634 169.035 cv
278.694 169.681 278.812 170.409 279.378 170.816 cv
cp
279.378 170.816 mo
279.87 171.171 280.516 171.193 281.045 170.91 cv
281.385 170.728 281.659 170.446 281.891 170.144 cv
282.303 169.611 282.204 168.844 281.67 168.432 cv
281.174 168.05 280.469 168.104 280.039 168.558 cv
280.04 168.557 li
279.352 168.594 278.824 169.183 278.862 169.871 cv
278.882 170.248 279.071 170.596 279.378 170.816 cv
cp
281.891 170.144 mo
282.393 169.495 282.766 168.748 283.103 168.004 cv
283.374 167.404 283.109 166.698 282.509 166.426 cv
281.92 166.159 281.225 166.411 280.943 166.994 cv
280.672 167.558 280.38 168.137 279.98 168.624 cv
279.553 169.145 279.628 169.914 280.15 170.342 cv
280.671 170.771 281.44 170.695 281.868 170.174 cv
281.876 170.165 281.883 170.155 281.891 170.144 cv
cp
283.103 168.004 mo
283.546 167.026 283.908 166.013 284.225 164.988 cv
284.415 164.375 284.071 163.725 283.458 163.535 cv
282.853 163.348 282.209 163.681 282.012 164.284 cv
281.709 165.206 281.366 166.118 280.943 166.994 cv
280.657 167.587 280.907 168.3 281.5 168.586 cv
282.092 168.871 282.805 168.623 283.091 168.029 cv
283.096 168.021 283.099 168.012 283.103 168.004 cv
cp
284.225 164.988 mo
284.59 163.805 284.877 162.6 285.102 161.383 cv
285.217 160.768 284.81 160.177 284.194 160.063 cv
283.585 159.95 282.998 160.347 282.876 160.954 cv
282.651 162.079 282.369 163.193 282.012 164.284 cv
281.812 164.893 282.145 165.549 282.754 165.748 cv
283.364 165.948 284.019 165.615 284.219 165.006 cv
284.221 165 284.223 164.994 284.225 164.988 cv
cp
285.102 161.383 mo
285.198 160.866 285.29 160.348 285.363 159.826 cv
285.409 159.491 285.457 159.146 285.442 158.806 cv
285.417 158.2 284.905 157.729 284.299 157.755 cv
283.733 157.778 283.277 158.231 283.248 158.797 cv
283.237 159.028 283.191 159.26 283.153 159.487 cv
283.069 159.978 282.974 160.466 282.876 160.954 cv
282.753 161.569 283.151 162.166 283.764 162.289 cv
284.379 162.412 284.976 162.014 285.099 161.4 cv
285.1 161.394 285.101 161.389 285.102 161.383 cv
cp
283.379 159.373 mo
283.379 159.373 li
283.667 159.907 284.333 160.106 284.867 159.818 cv
285.236 159.619 285.46 159.226 285.442 158.806 cv
285.425 158.391 285.268 157.988 284.965 157.699 cv
284.677 157.426 284.297 157.286 283.906 157.254 cv
283.298 157.202 282.762 157.654 282.71 158.262 cv
282.67 158.739 282.94 159.187 283.379 159.374 cv
cp
283.683 159.745 mo
283.755 159.64 283.835 159.534 283.935 159.453 cv
283.935 159.456 li
284.542 159.388 284.98 158.841 284.912 158.233 cv
284.854 157.709 284.433 157.299 283.906 157.254 cv
283.055 157.181 282.331 157.705 281.818 158.336 cv
281.411 158.836 281.486 159.573 281.987 159.981 cv
282.488 160.388 283.225 160.312 283.632 159.81 cv
283.649 159.789 283.666 159.767 283.683 159.745 cv
cp
282.908 161.52 mo
283.093 160.909 283.312 160.272 283.683 159.745 cv
284.053 159.215 283.925 158.487 283.396 158.116 cv
282.894 157.764 282.205 157.859 281.818 158.336 cv
281.24 159.046 280.866 159.91 280.573 160.77 cv
280.355 161.411 280.697 162.108 281.339 162.326 cv
281.98 162.545 282.677 162.203 282.896 161.561 cv
282.901 161.548 282.905 161.534 282.908 161.52 cv
cp
282.343 164.225 mo
282.459 163.31 282.642 162.403 282.908 161.52 cv
283.105 160.872 282.738 160.187 282.089 159.992 cv
281.457 159.8 280.786 160.145 280.573 160.77 cv
280.228 161.783 279.991 162.832 279.844 163.892 cv
279.748 164.581 280.229 165.219 280.919 165.315 cv
281.608 165.41 282.245 164.929 282.341 164.239 cv
282.341 164.234 282.342 164.23 282.343 164.225 cv
cp
282.147 167.617 mo
282.152 166.485 282.199 165.349 282.343 164.225 cv
282.431 163.534 281.943 162.902 281.251 162.815 cv
280.566 162.728 279.939 163.208 279.844 163.892 cv
279.672 165.12 279.612 166.362 279.602 167.601 cv
279.597 168.304 280.162 168.878 280.865 168.883 cv
281.568 168.888 282.141 168.323 282.147 167.62 cv
282.147 167.619 282.147 167.618 282.147 167.617 cv
cp
280.967 170.995 mo
280.967 170.995 li
281.635 171.218 282.355 170.857 282.577 170.189 cv
282.735 169.714 282.599 169.189 282.229 168.85 cv
282.144 168.45 282.145 168.025 282.147 167.617 cv
282.15 166.915 281.584 166.343 280.881 166.339 cv
280.18 166.335 279.607 166.9 279.602 167.601 cv
279.598 168.214 279.614 168.84 279.75 169.441 cv
279.903 170.115 280.275 170.765 280.967 170.995 cv
cp
280.967 170.995 mo
281.496 171.171 282.07 171.087 282.545 170.804 cv
282.927 170.575 283.234 170.24 283.487 169.878 cv
283.889 169.308 283.751 168.521 283.182 168.119 cv
282.618 167.723 281.84 167.851 281.435 168.408 cv
281.407 168.446 281.379 168.481 281.35 168.518 cv
281.35 168.516 li
280.647 168.526 280.086 169.105 280.096 169.807 cv
280.105 170.348 280.454 170.824 280.967 170.995 cv
cp
283.487 169.878 mo
283.78 169.463 284.006 169.005 284.21 168.541 cv
284.474 167.941 284.697 167.323 284.905 166.702 cv
285.123 166.052 284.772 165.35 284.123 165.133 cv
283.48 164.918 282.783 165.259 282.559 165.899 cv
282.368 166.446 282.164 166.99 281.924 167.517 cv
281.783 167.823 281.634 168.135 281.435 168.409 cv
281.025 168.972 281.149 169.761 281.712 170.172 cv
282.276 170.582 283.065 170.459 283.476 169.895 cv
283.479 169.889 283.483 169.884 283.487 169.878 cv
cp
284.905 166.702 mo
285.249 165.676 285.602 164.638 285.821 163.575 cv
285.955 162.921 285.533 162.282 284.879 162.148 cv
284.241 162.016 283.614 162.415 283.46 163.049 cv
283.227 164.015 282.887 164.961 282.559 165.899 cv
282.333 166.546 282.675 167.253 283.32 167.479 cv
283.967 167.705 284.674 167.364 284.9 166.718 cv
284.902 166.712 284.903 166.707 284.905 166.702 cv
cp
285.821 163.575 mo
285.927 163.051 286.035 162.515 286.049 161.978 cv
286.065 161.316 285.541 160.765 284.877 160.749 cv
284.214 160.733 283.664 161.257 283.648 161.92 cv
283.647 161.935 283.647 161.951 283.648 161.966 cv
283.653 162.326 283.544 162.703 283.46 163.049 cv
283.304 163.698 283.703 164.351 284.352 164.507 cv
285.001 164.665 285.655 164.265 285.811 163.616 cv
285.815 163.602 285.818 163.589 285.821 163.575 cv
cp
283.826 162.58 mo
283.826 162.58 li
284.174 163.144 284.915 163.32 285.479 162.971 cv
285.824 162.758 286.039 162.384 286.049 161.978 cv
286.06 161.517 285.893 161.063 285.56 160.739 cv
285.261 160.447 284.862 160.292 284.452 160.246 cv
283.781 160.171 283.176 160.654 283.101 161.325 cv
283.041 161.857 283.336 162.366 283.828 162.58 cv
cp
284.283 162.826 mo
284.32 162.774 284.361 162.723 284.406 162.677 cv
284.406 162.679 li
285.079 162.629 285.584 162.043 285.534 161.37 cv
285.491 160.784 285.036 160.311 284.452 160.246 cv
283.581 160.149 282.821 160.637 282.288 161.284 cv
281.844 161.822 281.92 162.617 282.458 163.059 cv
282.996 163.503 283.791 163.427 284.233 162.889 cv
284.25 162.868 284.267 162.847 284.283 162.826 cv
cp
283.632 164.21 mo
283.785 163.725 283.983 163.241 284.283 162.826 cv
284.691 162.261 284.564 161.473 284 161.064 cv
283.46 160.674 282.711 160.77 282.288 161.284 cv
281.781 161.898 281.42 162.621 281.149 163.366 cv
280.902 164.047 281.253 164.799 281.934 165.046 cv
282.615 165.294 283.366 164.942 283.615 164.262 cv
283.62 164.245 283.626 164.227 283.632 164.21 cv
cp
283.324 166.278 mo
283.341 165.581 283.42 164.877 283.632 164.21 cv
283.851 163.519 283.468 162.783 282.779 162.564 cv
282.108 162.351 281.389 162.705 281.149 163.366 cv
280.823 164.263 280.666 165.215 280.609 166.165 cv
280.563 166.914 281.134 167.558 281.884 167.603 cv
282.633 167.649 283.277 167.077 283.323 166.327 cv
283.324 166.311 283.324 166.295 283.324 166.278 cv
cp
280.771 168.558 mo
280.771 168.558 li
281.026 169.279 281.819 169.654 282.539 169.398 cv
283.259 169.141 283.634 168.35 283.378 167.629 cv
283.386 167.651 283.367 167.564 283.365 167.55 cv
283.351 167.457 283.343 167.363 283.336 167.268 cv
283.314 166.94 283.317 166.609 283.324 166.278 cv
283.342 165.528 282.748 164.905 281.998 164.887 cv
281.267 164.869 280.652 165.435 280.609 166.165 cv
280.583 166.596 280.568 167.029 280.587 167.461 cv
280.604 167.83 280.646 168.207 280.771 168.558 cv
cp
280.77 168.558 mo
280.947 169.054 281.318 169.457 281.79 169.69 cv
282.173 169.879 282.602 169.954 283.027 169.963 cv
283.792 169.979 284.424 169.372 284.441 168.608 cv
284.456 167.86 283.875 167.235 283.129 167.197 cv
283.13 167.198 li
282.635 166.615 281.761 166.544 281.179 167.039 cv
280.739 167.411 280.577 168.016 280.77 168.558 cv
cp
283.027 169.963 mo
283.989 169.983 284.878 169.55 285.495 168.822 cv
285.982 168.248 285.911 167.388 285.338 166.902 cv
284.783 166.431 283.958 166.479 283.461 167.01 cv
283.356 167.121 283.242 167.198 283.086 167.194 cv
282.321 167.178 281.689 167.786 281.673 168.55 cv
281.657 169.314 282.263 169.947 283.027 169.963 cv
cp
285.495 168.822 mo
286.114 168.093 286.504 167.181 286.828 166.291 cv
287.075 165.61 286.723 164.86 286.043 164.612 cv
285.382 164.373 284.65 164.698 284.383 165.348 cv
284.234 165.715 284.069 166.079 283.871 166.423 cv
283.753 166.629 283.624 166.836 283.461 167.01 cv
282.946 167.559 282.975 168.422 283.524 168.936 cv
284.074 169.45 284.936 169.422 285.451 168.872 cv
285.466 168.855 285.481 168.839 285.495 168.822 cv
cp
286.828 166.291 mo
287.172 165.341 287.459 164.368 287.643 163.374 cv
287.769 162.694 287.321 162.041 286.641 161.915 cv
285.981 161.793 285.343 162.213 285.192 162.866 cv
284.998 163.716 284.714 164.542 284.383 165.348 cv
284.109 166.017 284.43 166.783 285.099 167.057 cv
285.769 167.331 286.534 167.01 286.808 166.341 cv
286.815 166.325 286.822 166.307 286.828 166.291 cv
cp
287.643 163.374 mo
287.772 162.682 287.898 161.973 287.897 161.267 cv
287.896 160.59 287.347 160.043 286.671 160.044 cv
285.995 160.045 285.448 160.592 285.448 161.268 cv
285.448 161.803 285.311 162.349 285.192 162.866 cv
285.038 163.54 285.459 164.211 286.133 164.365 cv
286.807 164.521 287.479 164.099 287.633 163.425 cv
287.637 163.408 287.641 163.391 287.643 163.374 cv
cp
285.481 161.552 mo
285.481 161.552 li
285.638 162.21 286.297 162.616 286.956 162.46 cv
287.508 162.328 287.898 161.835 287.897 161.267 cv
287.896 160.901 287.835 160.53 287.656 160.206 cv
287.4 159.741 286.923 159.438 286.394 159.402 cv
285.712 159.355 285.123 159.87 285.076 160.552 cv
285.051 160.929 285.2 161.298 285.481 161.552 cv
cp
286.624 161.916 mo
286.646 161.879 286.668 161.845 286.692 161.81 cv
286.693 161.811 li
287.342 161.599 287.696 160.901 287.485 160.252 cv
287.329 159.772 286.897 159.436 286.394 159.402 cv
285.563 159.345 284.917 159.918 284.489 160.568 cv
284.106 161.151 284.267 161.934 284.85 162.317 cv
285.431 162.701 286.215 162.539 286.599 161.957 cv
286.608 161.944 286.615 161.93 286.624 161.916 cv
cp
286.055 163.259 mo
286.199 162.796 286.372 162.332 286.624 161.916 cv
286.985 161.319 286.793 160.542 286.197 160.182 cv
285.616 159.831 284.862 160.002 284.489 160.568 cv
284.106 161.151 283.826 161.796 283.598 162.453 cv
283.366 163.128 283.725 163.864 284.4 164.097 cv
285.074 164.33 285.81 163.971 286.042 163.296 cv
286.047 163.283 286.051 163.271 286.055 163.259 cv
cp
285.689 164.861 mo
285.759 164.317 285.892 163.782 286.055 163.259 cv
286.267 162.578 285.886 161.853 285.205 161.641 cv
284.538 161.433 283.827 161.793 283.598 162.453 cv
283.371 163.114 283.186 163.791 283.076 164.482 cv
282.961 165.202 283.451 165.879 284.171 165.993 cv
284.891 166.108 285.568 165.618 285.683 164.899 cv
285.685 164.886 285.687 164.874 285.689 164.861 cv
cp
285.594 166.288 mo
285.592 165.811 285.626 165.334 285.689 164.861 cv
285.783 164.137 285.273 163.475 284.55 163.381 cv
283.842 163.289 283.189 163.777 283.076 164.482 cv
282.98 165.084 282.925 165.695 282.929 166.306 cv
282.933 167.042 283.534 167.635 284.27 167.631 cv
285.006 167.627 285.599 167.027 285.594 166.291 cv
285.594 166.29 285.594 166.289 285.594 166.288 cv
cp
282.929 166.306 mo
282.931 166.733 283.01 167.164 283.216 167.543 cv
283.465 168.001 283.89 168.342 284.393 168.484 cv
285.103 168.685 285.843 168.271 286.043 167.56 cv
286.19 167.041 286.01 166.483 285.587 166.148 cv
285.587 166.15 li
285.505 165.418 284.845 164.892 284.114 164.973 cv
283.437 165.049 282.925 165.624 282.929 166.306 cv
cp
284.393 168.484 mo
285.021 168.661 285.689 168.47 286.148 168.01 cv
286.475 167.683 286.679 167.255 286.819 166.819 cv
287.042 166.127 286.661 165.386 285.969 165.164 cv
285.313 164.953 284.605 165.285 284.347 165.925 cv
284.348 165.923 li
283.645 166.149 283.257 166.902 283.483 167.605 cv
283.62 168.032 283.962 168.362 284.393 168.484 cv
cp
286.819 166.819 mo
286.965 166.364 287.06 165.892 287.141 165.421 cv
287.249 164.792 287.328 164.159 287.395 163.526 cv
287.469 162.827 286.964 162.2 286.265 162.126 cv
285.574 162.052 284.952 162.546 284.867 163.236 cv
284.797 163.81 284.716 164.382 284.603 164.948 cv
284.536 165.284 284.462 165.625 284.339 165.947 cv
284.079 166.625 284.419 167.385 285.097 167.644 cv
285.775 167.904 286.535 167.564 286.795 166.886 cv
286.803 166.864 286.812 166.842 286.819 166.819 cv
cp
287.395 163.526 mo
287.533 162.232 287.622 160.931 287.603 159.63 cv
287.594 158.942 287.028 158.393 286.341 158.402 cv
285.659 158.412 285.112 158.967 285.113 159.649 cv
285.115 160.848 285.012 162.047 284.867 163.236 cv
284.782 163.934 285.278 164.568 285.976 164.653 cv
286.673 164.739 287.308 164.243 287.393 163.545 cv
287.393 163.539 287.394 163.532 287.395 163.526 cv
cp
285.038 158.544 mo
285.113 158.904 285.112 159.284 285.113 159.649 cv
285.114 160.337 285.672 160.895 286.36 160.894 cv
287.048 160.892 287.605 160.334 287.604 159.646 cv
287.604 159.64 287.604 159.635 287.603 159.63 cv
287.597 159.126 287.574 158.616 287.474 158.121 cv
287.367 157.588 287.139 157.057 286.665 156.752 cv
286.094 156.384 285.334 156.549 284.967 157.12 cv
284.683 157.561 284.711 158.134 285.036 158.546 cv
cp
286.625 158.879 mo
286.629 158.859 286.631 158.851 286.635 158.835 cv
286.635 158.836 li
287.216 158.485 287.402 157.73 287.051 157.149 cv
286.954 156.989 286.823 156.853 286.665 156.752 cv
286.294 156.513 285.828 156.45 285.411 156.6 cv
285.103 156.712 284.848 156.93 284.668 157.199 cv
284.433 157.549 284.318 157.967 284.232 158.375 cv
284.091 159.036 284.514 159.685 285.175 159.825 cv
285.835 159.966 286.484 159.543 286.625 158.882 cv
286.625 158.881 286.625 158.88 286.625 158.879 cv
cp
286.456 163.386 mo
286.449 162.394 286.448 161.4 286.489 160.408 cv
286.51 159.902 286.52 159.378 286.625 158.879 cv
286.764 158.219 286.34 157.571 285.679 157.431 cv
285.019 157.293 284.372 157.716 284.232 158.375 cv
284.099 159.003 284.065 159.655 284.031 160.295 cv
283.978 161.325 283.965 162.359 283.96 163.391 cv
283.956 164.08 284.513 164.641 285.203 164.645 cv
285.892 164.648 286.454 164.092 286.457 163.403 cv
286.457 163.397 286.457 163.392 286.456 163.386 cv
cp
286.49 167.273 mo
286.479 165.977 286.468 164.682 286.456 163.386 cv
286.451 162.697 285.888 162.142 285.198 162.148 cv
284.515 162.154 283.963 162.708 283.96 163.391 cv
283.955 164.687 283.948 165.982 283.942 167.278 cv
283.939 167.981 284.507 168.555 285.21 168.557 cv
285.913 168.561 286.486 167.993 286.489 167.289 cv
286.49 167.284 286.49 167.278 286.49 167.273 cv
cp
283.945 167.518 mo
283.945 167.518 li
283.994 168.221 284.603 168.75 285.306 168.7 cv
285.848 168.662 286.307 168.285 286.448 167.76 cv
286.464 167.702 286.475 167.643 286.483 167.583 cv
286.489 167.532 286.491 167.482 286.492 167.431 cv
286.492 167.39 286.492 167.348 286.488 167.307 cv
286.487 167.324 286.492 167.418 286.49 167.356 cv
286.49 167.329 286.49 167.301 286.49 167.273 cv
286.484 166.569 285.909 166.004 285.205 166.01 cv
284.508 166.016 283.946 166.581 283.942 167.278 cv
283.942 167.312 283.936 167.483 283.945 167.348 cv
283.943 167.348 li
283.942 167.37 283.941 167.391 283.94 167.413 cv
283.941 167.448 283.941 167.483 283.945 167.518 cv
cp
286.492 167.432 mo
286.5 166.982 286.506 166.533 286.514 166.084 cv
286.526 165.373 285.959 164.786 285.248 164.775 cv
284.536 164.763 283.95 165.331 283.938 166.042 cv
283.939 166.049 283.939 166.057 283.939 166.065 cv
283.939 166.514 283.94 166.963 283.94 167.412 cv
283.942 168.117 284.514 168.688 285.218 168.686 cv
285.915 168.685 286.481 168.128 286.492 167.432 cv
cp
286.514 166.084 mo
286.527 165.248 286.585 164.413 286.679 163.582 cv
286.759 162.873 286.249 162.233 285.54 162.153 cv
284.836 162.073 284.199 162.575 284.112 163.279 cv
283.998 164.202 283.937 165.133 283.939 166.065 cv
283.94 166.776 284.518 167.352 285.229 167.35 cv
285.931 167.349 286.502 166.785 286.514 166.084 cv
cp
286.679 163.582 mo
286.807 162.447 286.911 161.31 287.008 160.173 cv
287.068 159.471 286.547 158.854 285.847 158.794 cv
285.151 158.736 284.537 159.247 284.47 159.942 cv
284.363 161.055 284.249 162.168 284.112 163.279 cv
284.024 163.987 284.528 164.632 285.236 164.72 cv
285.945 164.808 286.59 164.304 286.678 163.595 cv
286.678 163.591 286.679 163.587 286.679 163.582 cv
cp
287.008 160.173 mo
287.091 159.193 287.195 158.195 287.147 157.21 cv
287.115 156.531 286.54 156.008 285.862 156.041 cv
285.227 156.071 284.719 156.582 284.693 157.217 cv
284.655 158.127 284.557 159.036 284.47 159.942 cv
284.402 160.642 284.915 161.264 285.616 161.332 cv
286.316 161.4 286.939 160.887 287.007 160.187 cv
287.007 160.182 287.008 160.177 287.008 160.173 cv
cp
284.693 157.332 mo
284.693 157.332 li
284.728 158.009 285.306 158.531 285.984 158.495 cv
286.66 158.46 287.18 157.886 287.147 157.21 cv
287.131 156.851 287.073 156.489 286.917 156.163 cv
286.69 155.688 286.255 155.342 285.731 155.264 cv
285.731 155.265 li
285.066 155.164 284.446 155.623 284.347 156.288 cv
284.29 156.671 284.418 157.059 284.693 157.332 cv
cp
285.589 157.991 mo
285.678 157.868 285.77 157.747 285.875 157.639 cv
285.876 157.641 li
286.524 157.461 286.903 156.79 286.724 156.143 cv
286.595 155.679 286.206 155.335 285.731 155.265 cv
284.806 155.125 284.086 155.833 283.578 156.51 cv
283.163 157.062 283.275 157.844 283.827 158.259 cv
284.379 158.673 285.162 158.56 285.575 158.009 cv
285.58 158.003 285.584 157.997 285.589 157.991 cv
cp
284.714 159.53 mo
284.95 158.987 285.243 158.47 285.589 157.991 cv
285.993 157.432 285.867 156.651 285.308 156.248 cv
284.756 155.848 283.986 155.965 283.578 156.51 cv
283.121 157.118 282.722 157.77 282.386 158.453 cv
282.074 159.089 282.335 159.858 282.971 160.17 cv
283.607 160.483 284.376 160.222 284.689 159.586 cv
284.698 159.567 284.706 159.548 284.714 159.53 cv
cp
284.18 161.161 mo
284.303 160.601 284.486 160.055 284.714 159.53 cv
284.997 158.879 284.698 158.124 284.047 157.841 cv
283.42 157.57 282.688 157.838 282.386 158.453 cv
282.052 159.13 281.788 159.843 281.614 160.578 cv
281.448 161.286 281.885 161.994 282.593 162.161 cv
283.3 162.327 284.009 161.89 284.175 161.182 cv
284.177 161.175 284.178 161.168 284.18 161.161 cv
cp
284.017 162.681 mo
284.012 162.17 284.071 161.659 284.18 161.161 cv
284.335 160.451 283.885 159.749 283.175 159.595 cv
282.474 159.442 281.779 159.879 281.614 160.578 cv
281.45 161.27 281.36 161.979 281.358 162.69 cv
281.357 163.424 281.95 164.021 282.684 164.024 cv
283.418 164.025 284.015 163.432 284.017 162.698 cv
284.017 162.692 284.017 162.687 284.017 162.681 cv
cp
282.877 165.009 mo
282.877 165.008 li
283.588 165.19 284.313 164.762 284.496 164.051 cv
284.629 163.534 284.44 162.988 284.016 162.664 cv
284.017 162.664 li
284 161.93 283.391 161.348 282.658 161.365 cv
281.937 161.381 281.361 161.969 281.358 162.69 cv
281.357 163.138 281.427 163.594 281.631 163.997 cv
281.883 164.495 282.335 164.869 282.877 165.009 cv
cp
282.877 165.008 mo
283.516 165.172 284.173 164.953 284.639 164.501 cv
284.984 164.165 285.223 163.733 285.413 163.295 cv
285.413 163.294 li
285.701 162.631 285.396 161.861 284.733 161.574 cv
284.083 161.292 283.327 161.579 283.028 162.222 cv
282.995 162.29 282.961 162.357 282.925 162.423 cv
282.924 162.421 li
282.207 162.578 281.752 163.287 281.909 164.004 cv
282.016 164.495 282.391 164.883 282.877 165.008 cv
cp
285.413 163.294 mo
285.753 162.509 286.034 161.698 286.252 160.871 cv
286.432 160.187 286.024 159.486 285.34 159.306 cv
284.664 159.128 283.972 159.524 283.782 160.196 cv
283.585 160.889 283.332 161.568 283.028 162.222 cv
282.722 162.876 283.005 163.655 283.66 163.96 cv
284.315 164.266 285.093 163.983 285.399 163.327 cv
285.404 163.316 285.408 163.306 285.413 163.294 cv
cp
286.252 160.871 mo
286.445 160.136 286.61 159.394 286.718 158.641 cv
286.816 157.955 286.338 157.319 285.651 157.221 cv
284.978 157.125 284.35 157.581 284.236 158.251 cv
284.124 158.908 283.963 159.556 283.782 160.196 cv
283.589 160.876 283.983 161.583 284.664 161.776 cv
285.345 161.969 286.052 161.575 286.245 160.894 cv
286.248 160.887 286.25 160.879 286.252 160.871 cv
cp
286.718 158.641 mo
286.788 158.144 286.861 157.642 286.873 157.14 cv
286.891 156.449 286.344 155.874 285.653 155.858 cv
284.963 155.841 284.388 156.387 284.371 157.078 cv
284.371 157.095 284.371 157.113 284.371 157.13 cv
284.377 157.503 284.299 157.886 284.236 158.251 cv
284.118 158.936 284.578 159.584 285.261 159.702 cv
285.946 159.819 286.594 159.36 286.712 158.676 cv
286.714 158.664 286.716 158.653 286.718 158.641 cv
cp
284.553 157.76 mo
284.553 157.76 li
284.912 158.349 285.683 158.537 286.272 158.178 cv
286.637 157.957 286.863 157.565 286.873 157.14 cv
286.883 156.726 286.767 156.313 286.502 155.99 cv
286.212 155.637 285.779 155.437 285.328 155.404 cv
284.624 155.353 284.011 155.882 283.961 156.585 cv
283.926 157.057 284.154 157.508 284.554 157.76 cv
cp
285.155 158.122 mo
285.228 158.058 285.304 157.995 285.388 157.945 cv
285.389 157.947 li
286.089 157.863 286.588 157.226 286.503 156.525 cv
286.43 155.918 285.937 155.448 285.328 155.404 cv
284.622 155.353 283.975 155.706 283.452 156.147 cv
282.901 156.611 282.83 157.434 283.294 157.984 cv
283.757 158.536 284.58 158.606 285.132 158.143 cv
285.14 158.136 285.147 158.13 285.155 158.122 cv
cp
284.182 159.661 mo
284.366 159.294 284.561 158.93 284.788 158.588 cv
284.894 158.426 285.008 158.252 285.155 158.122 cv
285.695 157.646 285.746 156.821 285.269 156.282 cv
284.801 155.751 283.994 155.691 283.452 156.147 cv
282.739 156.747 282.249 157.61 281.808 158.415 cv
281.453 159.065 281.692 159.879 282.341 160.235 cv
282.99 160.59 283.805 160.351 284.16 159.701 cv
284.168 159.688 284.175 159.675 284.182 159.661 cv
cp
283.26 161.841 mo
283.482 161.085 283.829 160.363 284.182 159.661 cv
284.515 159 284.248 158.194 283.587 157.861 cv
282.942 157.536 282.155 157.782 281.808 158.415 cv
281.352 159.25 280.917 160.111 280.618 161.018 cv
280.38 161.744 280.775 162.525 281.501 162.765 cv
282.227 163.003 283.008 162.608 283.248 161.882 cv
283.251 161.868 283.256 161.855 283.26 161.841 cv
cp
283.007 163.267 mo
283.022 162.784 283.124 162.305 283.26 161.841 cv
283.477 161.107 283.057 160.338 282.324 160.123 cv
281.606 159.911 280.852 160.307 280.618 161.018 cv
280.391 161.709 280.234 162.426 280.199 163.155 cv
280.162 163.929 280.761 164.587 281.537 164.623 cv
282.311 164.66 282.969 164.061 283.006 163.287 cv
283.006 163.28 283.006 163.274 283.007 163.267 cv
cp
281.129 165.261 mo
281.129 165.261 li
281.254 165.309 281.384 165.338 281.516 165.349 cv
281.646 165.359 281.777 165.352 281.906 165.326 cv
282.258 165.257 282.572 165.055 282.783 164.767 cv
283.042 164.415 283.123 163.964 283.003 163.544 cv
283.001 163.452 283.003 163.36 283.007 163.267 cv
283.032 162.492 282.425 161.843 281.649 161.817 cv
280.881 161.791 280.235 162.387 280.199 163.155 cv
280.189 163.371 280.18 163.589 280.187 163.807 cv
280.191 163.925 280.201 164.043 280.223 164.16 cv
280.317 164.654 280.651 165.08 281.129 165.261 cv
cp
282.783 164.767 mo
282.913 164.591 283.042 164.415 283.171 164.239 cv
283.631 163.615 283.497 162.736 282.872 162.277 cv
282.256 161.824 281.389 161.948 280.925 162.556 cv
280.792 162.73 280.66 162.903 280.527 163.077 cv
280.056 163.697 280.175 164.58 280.794 165.052 cv
281.412 165.525 282.297 165.405 282.769 164.787 cv
282.774 164.78 282.778 164.774 282.783 164.767 cv
cp
283.171 164.239 mo
283.631 163.614 283.838 162.809 284.018 162.067 cv
284.194 161.339 283.747 160.605 283.019 160.429 cv
282.325 160.261 281.619 160.66 281.405 161.342 cv
281.311 161.644 281.21 161.945 281.086 162.236 cv
281.036 162.352 280.985 162.475 280.91 162.577 cv
280.451 163.201 280.585 164.079 281.21 164.538 cv
281.834 164.998 282.713 164.864 283.171 164.239 cv
cp
284.018 162.067 mo
284.192 161.347 284.354 160.62 284.44 159.884 cv
284.524 159.176 284.017 158.534 283.309 158.45 cv
282.629 158.37 282.006 158.834 281.887 159.508 cv
281.777 160.13 281.594 160.74 281.405 161.342 cv
281.182 162.056 281.579 162.817 282.294 163.041 cv
283.009 163.265 283.769 162.868 283.994 162.153 cv
284.003 162.124 284.01 162.096 284.018 162.067 cv
cp
284.44 159.884 mo
284.504 159.351 284.541 158.814 284.54 158.276 cv
284.539 157.575 283.97 157.007 283.269 157.009 cv
282.567 157.009 282 157.578 282 158.279 cv
282 158.28 282 158.281 282 158.281 cv
282.002 158.693 281.958 159.104 281.887 159.508 cv
281.763 160.21 282.231 160.881 282.933 161.005 cv
283.636 161.128 284.305 160.66 284.43 159.957 cv
284.434 159.933 284.438 159.909 284.44 159.884 cv
cp
282.051 158.632 mo
282.051 158.632 li
282.246 159.305 282.951 159.692 283.624 159.498 cv
284.168 159.34 284.541 158.842 284.54 158.276 cv
284.539 157.851 284.451 157.419 284.211 157.061 cv
283.891 156.586 283.343 156.323 282.774 156.343 cv
282.07 156.369 281.521 156.959 281.546 157.662 cv
281.56 158.046 281.745 158.401 282.051 158.633 cv
cp
282.727 159.175 mo
282.822 159.066 282.921 158.958 283.037 158.871 cv
283.731 158.751 284.195 158.092 284.075 157.398 cv
283.966 156.77 283.41 156.32 282.774 156.343 cv
281.975 156.372 281.315 156.895 280.8 157.461 cv
280.32 157.988 280.358 158.804 280.885 159.284 cv
281.411 159.762 282.227 159.725 282.706 159.198 cv
282.713 159.191 282.721 159.183 282.727 159.175 cv
cp
281.845 160.532 mo
282.083 160.048 282.373 159.584 282.727 159.175 cv
283.194 158.637 283.136 157.822 282.598 157.355 cv
282.069 156.898 281.272 156.944 280.8 157.461 cv
280.299 158.011 279.865 158.619 279.486 159.257 cv
279.108 159.894 279.318 160.718 279.955 161.096 cv
280.593 161.474 281.416 161.264 281.795 160.626 cv
281.812 160.596 281.829 160.565 281.845 160.532 cv
cp
281.223 161.953 mo
281.397 161.466 281.618 160.996 281.845 160.532 cv
282.172 159.868 281.896 159.063 281.232 158.737 cv
280.603 158.428 279.843 158.655 279.486 159.257 cv
279.159 159.809 278.848 160.376 278.612 160.973 cv
278.328 161.69 278.68 162.501 279.396 162.783 cv
280.112 163.067 280.923 162.715 281.207 161.999 cv
281.213 161.984 281.217 161.968 281.223 161.953 cv
cp
280.775 163.837 mo
280.896 163.208 281.008 162.558 281.223 161.953 cv
281.482 161.227 281.102 160.429 280.376 160.172 cv
279.667 159.92 278.888 160.274 278.612 160.973 cv
278.318 161.716 278.159 162.516 278.004 163.296 cv
277.852 164.06 278.349 164.804 279.113 164.956 cv
279.878 165.109 280.621 164.612 280.773 163.847 cv
280.774 163.843 280.775 163.84 280.775 163.837 cv
cp
280.422 166.043 mo
280.5 165.303 280.635 164.568 280.775 163.837 cv
280.922 163.071 280.421 162.331 279.655 162.184 cv
278.892 162.038 278.155 162.535 278.004 163.296 cv
277.84 164.116 277.688 164.944 277.619 165.779 cv
277.555 166.554 278.131 167.234 278.905 167.298 cv
279.668 167.361 280.341 166.804 280.422 166.043 cv
cp
280.367 168.432 mo
280.354 167.638 280.338 166.834 280.422 166.043 cv
280.503 165.27 279.943 164.578 279.17 164.496 cv
278.397 164.414 277.704 164.974 277.622 165.747 cv
277.621 165.758 277.62 165.768 277.619 165.779 cv
277.545 166.671 277.547 167.57 277.551 168.465 cv
277.556 169.242 278.19 169.87 278.967 169.865 cv
279.745 169.861 280.372 169.227 280.367 168.449 cv
280.367 168.443 280.367 168.438 280.367 168.432 cv
cp
278.202 171.635 mo
278.202 171.635 li
278.597 172.31 279.463 172.538 280.139 172.144 cv
280.811 171.751 281.041 170.889 280.652 170.214 cv
280.555 170.046 280.512 169.843 280.476 169.654 cv
280.399 169.252 280.375 168.84 280.367 168.432 cv
280.354 167.654 279.713 167.036 278.935 167.049 cv
278.164 167.063 277.547 167.694 277.551 168.465 cv
277.558 169.532 277.653 170.692 278.202 171.635 cv
cp
278.202 171.635 mo
278.59 172.299 279.124 172.918 279.861 173.198 cv
280.593 173.476 281.412 173.107 281.689 172.375 cv
281.946 171.699 281.653 170.938 281.009 170.61 cv
280.909 170.559 280.88 170.546 280.815 170.463 cv
280.754 170.385 280.701 170.299 280.652 170.214 cv
280.261 169.537 279.395 169.304 278.718 169.695 cv
278.04 170.085 277.808 170.95 278.199 171.628 cv
278.2 171.631 278.201 171.633 278.202 171.635 cv
cp
279.861 173.198 mo
280.411 173.407 281.006 173.477 281.592 173.479 cv
282.384 173.482 283.026 172.842 283.029 172.051 cv
283.032 171.26 282.392 170.618 281.601 170.615 cv
281.588 170.615 281.575 170.615 281.562 170.615 cv
281.327 170.621 281.07 170.62 280.846 170.539 cv
280.11 170.273 279.296 170.654 279.031 171.391 cv
278.767 172.119 279.137 172.923 279.861 173.198 cv
cp
281.598 173.479 mo
282.324 173.479 283.036 173.188 283.522 172.642 cv
283.924 172.191 284.136 171.605 284.167 171.006 cv
284.193 170.491 283.796 170.051 283.281 170.025 cv
283.059 170.014 282.839 170.082 282.662 170.218 cv
282.335 170.47 281.981 170.606 281.568 170.615 cv
280.777 170.632 280.149 171.285 280.165 172.076 cv
280.18 172.857 280.817 173.48 281.598 173.479 cv
cp
f
5.24345 35.3232 mo
5.74644 35.6623 6.20816 36.0619 6.65596 36.4687 cv
6.94604 36.7313 7.39383 36.7101 7.65744 36.42 cv
7.92007 36.1309 7.89882 35.6821 7.60872 35.4195 cv
7.11038 34.9663 6.59518 34.5253 6.03673 34.1478 cv
5.71313 33.9286 5.27211 34.0138 5.0519 34.3383 cv
4.83267 34.6619 4.91785 35.103 5.24243 35.3222 cv
5.24245 35.3232 5.24345 35.3232 5.24345 35.3232 cv
cp
6.65596 36.4687 mo
7.4545 37.1934 8.34488 37.819 9.237 38.4216 cv
9.56059 38.6408 10.0006 38.5556 10.2198 38.232 cv
10.4391 37.9084 10.3539 37.4684 10.0303 37.2492 cv
9.19463 36.683 8.35771 36.0977 7.60872 35.4195 cv
7.31862 35.1558 6.87085 35.1781 6.60722 35.4672 cv
6.3446 35.7573 6.36687 36.2061 6.65596 36.4687 cv
cp
9.237 38.4216 mo
10.0626 38.9809 10.8913 39.5452 11.6696 40.1692 cv
11.9725 40.4126 12.416 40.3634 12.6584 40.0605 cv
12.8999 39.7587 12.8527 39.3182 12.5529 39.0747 cv
11.7481 38.4201 10.8892 37.8311 10.0303 37.2492 cv
9.70673 37.03 9.26669 37.1151 9.04747 37.4387 cv
8.82726 37.7623 8.91241 38.2023 9.23601 38.4216 cv
9.23601 38.4216 9.23601 38.4216 9.237 38.4216 cv
cp
11.6696 40.1692 mo
12.2794 40.6581 12.9315 41.0934 13.6111 41.4795 cv
13.9433 41.6686 14.366 41.5526 14.5561 41.2204 cv
14.7433 40.8902 14.6313 40.4715 14.3031 40.2793 cv
13.6909 39.9225 13.1031 39.5223 12.5529 39.0747 cv
12.252 38.8303 11.8085 38.8755 11.564 39.1773 cv
11.3185 39.4782 11.3647 39.9207 11.6656 40.1662 cv
11.6676 40.1672 11.6686 40.1682 11.6696 40.1692 cv
cp
13.6111 41.4795 mo
14.3581 41.9048 15.0562 42.4146 15.7265 42.9518 cv
16.0223 43.1883 16.4537 43.1403 16.6903 42.8445 cv
16.9268 42.5497 16.8798 42.1182 16.584 41.8807 cv
15.8591 41.3001 15.1056 40.7489 14.3031 40.2793 cv
13.9728 40.0872 13.5491 40.1981 13.3559 40.5284 cv
13.1628 40.8587 13.2738 41.2824 13.604 41.4756 cv
13.6061 41.4775 13.6091 41.4785 13.6111 41.4795 cv
cp
15.7265 42.9518 mo
16.4776 43.553 17.207 44.1815 17.9058 44.8423 cv
18.1808 45.1021 18.6147 45.0901 18.8755 44.815 cv
19.1353 44.5399 19.1232 44.106 18.8482 43.8463 cv
18.8481 43.8452 18.8481 43.8452 18.8481 43.8452 cv
18.1211 43.1587 17.3634 42.5066 16.584 41.8807 cv
16.2882 41.6441 15.8567 41.6912 15.6202 41.987 cv
15.3826 42.2828 15.4307 42.7142 15.7265 42.9508 cv
15.7265 42.9518 li
cp
17.9058 44.8423 mo
18.5237 45.4261 19.1504 46.0009 19.794 46.5553 cv
20.0809 46.801 20.5125 46.7689 20.7592 46.482 cv
21.0048 46.1961 20.9738 45.7655 20.6879 45.5188 cv
20.0615 44.9761 19.4509 44.4152 18.8481 43.8452 cv
18.5731 43.5854 18.1392 43.5975 17.8784 43.8736 cv
17.6186 44.1487 17.6307 44.5826 17.9058 44.8423 cv
cp
19.794 46.5553 mo
20.2849 46.9766 20.7483 47.4312 21.1592 47.9314 cv
21.3986 48.2226 21.8291 48.2636 22.1203 48.0242 cv
22.4115 47.7847 22.4535 47.3542 22.2131 47.063 cv
21.7525 46.5044 21.2355 45.9924 20.6879 45.5188 cv
20.403 45.2711 19.9703 45.3032 19.7226 45.5881 cv
19.476 45.874 19.507 46.3067 19.7929 46.5533 cv
19.793 46.5544 19.7939 46.5543 19.794 46.5553 cv
cp
21.1592 47.9314 mo
21.6421 48.5178 22.1923 49.0474 22.7691 49.5406 cv
22.7691 49.5396 li
23.055 49.7843 23.4856 49.7513 23.7303 49.4654 cv
23.975 49.1795 23.9419 48.7498 23.6561 48.5052 cv
23.1408 48.0622 22.6463 47.589 22.2131 47.063 cv
21.9736 46.7728 21.5431 46.7308 21.2519 46.9703 cv
20.9617 47.2097 20.9197 47.6402 21.1592 47.9314 cv
cp
22.7691 49.5406 mo
23.6187 50.2668 24.3775 51.1029 25.1233 51.9322 cv
25.3746 52.2113 25.8039 52.2343 26.083 51.984 cv
26.3611 51.7337 26.385 51.3044 26.1347 51.0253 cv
25.3504 50.1505 24.5491 49.2718 23.6561 48.5052 cv
23.3701 48.2595 22.9405 48.2926 22.6949 48.5785 cv
22.4492 48.8634 22.4822 49.294 22.7681 49.5397 cv
22.7691 49.5396 li
cp
25.1233 51.9322 mo
25.9765 52.8813 26.8475 53.8171 27.7738 54.6953 cv
28.0449 54.9532 28.4748 54.9421 28.7326 54.6701 cv
28.9894 54.398 28.9784 53.9691 28.7064 53.7113 cv
27.8073 52.8588 26.9616 51.9477 26.1347 51.0253 cv
25.8844 50.7462 25.4541 50.7223 25.1751 50.9725 cv
24.896 51.2228 24.872 51.6531 25.1233 51.9322 cv
cp
27.7738 54.6953 mo
28.6496 55.5261 29.4711 56.4125 30.2727 57.3142 cv
30.5291 57.6032 30.9714 57.629 31.2604 57.3726 cv
31.5494 57.1152 31.5753 56.6739 31.3189 56.3849 cv
31.3158 56.3809 31.3128 56.378 31.3097 56.374 cv
30.466 55.4638 29.6074 54.5658 28.7064 53.7113 cv
28.4353 53.4535 28.0054 53.4655 27.7486 53.7375 cv
27.4908 54.0086 27.5018 54.4375 27.7738 54.6953 cv
cp
30.2727 57.3142 mo
30.6487 57.7368 31.0227 58.1624 31.3818 58.5993 cv
31.5381 58.7905 31.7164 58.9844 31.8369 59.201 cv
32.0351 59.5577 32.4856 59.6864 32.8423 59.4882 cv
33.199 59.289 33.3268 58.8395 33.1285 58.4818 cv
33.1194 58.4659 33.1092 58.45 33.099 58.4341 cv
32.9188 58.1612 32.6959 57.9138 32.481 57.6683 cv
32.0978 57.2298 31.7048 56.8014 31.3097 56.374 cv
31.0464 56.0901 30.6042 56.0732 30.3202 56.3356 cv
30.0412 56.5948 30.0193 57.0291 30.2727 57.3142 cv
cp
31.8369 59.201 mo
31.9319 59.3719 32.0269 59.5428 32.1219 59.7137 cv
32.3262 60.0813 32.7898 60.2129 33.1574 60.0085 cv
33.5251 59.8042 33.6576 59.3406 33.4533 58.973 cv
33.4431 58.9551 33.4329 58.9393 33.4227 58.9224 cv
33.3148 58.7596 33.2069 58.5969 33.099 58.4341 cv
32.874 58.0927 32.4149 58.0001 32.0745 58.2251 cv
31.752 58.4389 31.6489 58.8642 31.8369 59.201 cv
cp
32.1232 59.7346 mo
32.1883 59.8339 32.2564 59.9251 32.3523 59.998 cv
32.4138 60.0433 32.4802 60.0795 32.5515 60.1057 cv
32.9492 60.25 33.3878 60.0439 33.5322 59.6471 cv
33.601 59.4563 33.5915 59.2454 33.5053 59.0614 cv
33.4787 59.0047 33.4441 58.9531 33.4105 58.9015 cv
33.4115 58.9015 li
33.1823 58.5452 32.708 58.4417 32.3517 58.6709 cv
31.9954 58.8991 31.8919 59.3743 32.1211 59.7307 cv
32.1221 59.7317 32.1221 59.7337 32.1232 59.7346 cv
cp
31.5487 58.3303 mo
31.6521 58.6201 31.7565 58.9099 31.8708 59.1966 cv
31.943 59.3788 32.0152 59.5689 32.1231 59.7336 cv
32.3543 60.089 32.8285 60.1894 33.1838 59.9583 cv
33.5382 59.7291 33.6386 59.2559 33.4105 58.9005 cv
33.3035 58.7348 33.1608 58.5914 33.0242 58.45 cv
32.8096 58.2295 32.588 58.0141 32.3655 57.8017 cv
32.1663 57.61 31.8493 57.6167 31.6587 57.817 cv
31.5273 57.9535 31.4856 58.152 31.5487 58.3303 cv
cp
f
28.4833 58.6559 mo
28.5487 59.1181 28.9449 59.4785 29.4206 59.4469 cv
29.6624 59.4311 29.8811 59.3165 30.0755 59.1792 cv
30.3195 59.0074 30.3776 58.6697 30.2057 58.4267 cv
30.1386 58.3304 30.0417 58.2596 29.9303 58.2239 cv
29.9313 58.2239 li
29.7518 57.8419 29.2969 57.6773 28.9149 57.8568 cv
28.6116 57.9993 28.4364 58.3234 28.4833 58.6559 cv
cp
28.4897 58.6918 mo
28.4897 58.6918 li
28.5686 59.1059 28.9688 59.3782 29.3829 59.2994 cv
29.5246 59.2717 29.6568 59.2051 29.7616 59.1059 cv
29.7846 59.1036 29.8086 59.1024 29.8326 59.1021 cv
30.2725 59.0899 30.6192 58.7249 30.6081 58.2849 cv
30.597 57.851 30.2399 57.5062 29.8059 57.5093 cv
29.5429 57.5104 29.2723 57.5435 29.0327 57.6604 cv
28.6468 57.8479 28.4066 58.2607 28.4897 58.6918 cv
cp
29.8326 59.1021 mo
30.1655 59.0932 30.4991 59.2313 30.7919 59.3759 cv
31.1831 59.5683 31.6573 59.4067 31.8497 59.0154 cv
32.0421 58.6241 31.8816 58.151 31.4913 57.9576 cv
30.9682 57.6997 30.3949 57.5044 29.8059 57.5093 cv
29.3659 57.5114 29.0121 57.8706 29.0153 58.3106 cv
29.0184 58.7506 29.3776 59.1054 29.8176 59.1023 cv
29.8226 59.1022 29.8276 59.1021 29.8326 59.1021 cv
cp
30.7919 59.3759 mo
31.2867 59.6191 31.7523 59.9186 32.1932 60.2495 cv
32.5423 60.5114 33.0355 60.4406 33.2974 60.0925 cv
33.5583 59.7444 33.4886 59.2513 33.1415 58.9893 cv
32.6229 58.5984 32.0737 58.2458 31.4913 57.9576 cv
31.099 57.7642 30.6258 57.9247 30.4324 58.316 cv
30.239 58.7073 30.3996 59.1815 30.7908 59.3749 cv
30.7908 59.3749 30.7919 59.3748 30.7919 59.3759 cv
cp
32.1932 60.2495 mo
32.629 60.5764 33.0839 60.9051 33.5865 61.1222 cv
33.9815 61.2936 34.4414 61.1112 34.6118 60.7162 cv
34.7793 60.3282 34.609 59.8781 34.2259 59.6996 cv
33.8367 59.5172 33.4825 59.2463 33.1415 58.9893 cv
32.7934 58.7274 32.2992 58.7971 32.0372 59.1443 cv
31.7753 59.4923 31.8441 59.9866 32.1922 60.2485 cv
32.1922 60.2495 32.1932 60.2495 32.1932 60.2495 cv
cp
33.5865 61.1222 mo
34.0458 61.3208 34.5836 61.2115 34.8746 60.7861 cv
35.0782 60.4877 35.1168 60.1132 35.1126 59.7613 cv
35.1067 59.3373 34.7577 58.9984 34.3337 59.0033 cv
33.9438 59.0089 33.6202 59.3057 33.5807 59.6942 cv
33.5807 59.6922 li
33.1868 59.8668 33.0081 60.3279 33.1828 60.7219 cv
33.2619 60.901 33.4066 61.0443 33.5865 61.1222 cv
cp
33.3044 58.3033 mo
33.472 58.7744 33.5758 59.2712 33.5767 59.7733 cv
33.5767 60.1973 33.9217 60.5403 34.3457 60.5403 cv
34.7697 60.5393 35.1127 60.1943 35.1127 59.7702 cv
35.1127 59.7672 35.1127 59.7643 35.1126 59.7613 cv
35.1028 59.0933 34.973 58.4308 34.7596 57.7983 cv
34.6229 57.3958 34.1863 57.1799 33.7829 57.3157 cv
33.3805 57.4524 33.1646 57.8889 33.3003 58.2924 cv
33.3024 58.2964 33.3034 58.2993 33.3044 58.3033 cv
cp
32.4454 56.5143 mo
32.7791 57.0854 33.0831 57.6789 33.3044 58.3033 cv
33.4471 58.7037 33.8876 58.9135 34.288 58.7708 cv
34.6844 58.6302 34.8943 58.1967 34.7596 57.7983 cv
34.5151 57.0761 34.1741 56.389 33.7913 55.7305 cv
33.5759 55.358 33.0994 55.2316 32.7269 55.4479 cv
32.3555 55.6643 32.229 56.1408 32.4444 56.5123 cv
32.4454 56.5133 32.4454 56.5143 32.4454 56.5143 cv
cp
31.4498 54.1628 mo
31.6775 54.9862 32.0148 55.7773 32.4454 56.5143 cv
32.6628 56.8858 33.1403 57.0112 33.5117 56.7938 cv
33.8823 56.5775 34.0077 56.101 33.7913 55.7305 cv
33.4392 55.1246 33.1824 54.4645 33.0394 53.7782 cv
32.9472 53.3362 32.5139 53.0523 32.0719 53.1445 cv
31.63 53.2367 31.346 53.67 31.4382 54.112 cv
31.4414 54.1289 31.4456 54.1459 31.4498 54.1628 cv
cp
30.9078 52.114 mo
31.0798 52.7991 31.2628 53.482 31.4498 54.1628 cv
31.5699 54.5974 32.0209 54.8542 32.4565 54.7331 cv
32.8723 54.6192 33.1273 54.2002 33.0394 53.7782 cv
32.8656 52.9422 32.4769 52.1187 31.8232 51.5513 cv
31.5878 51.3481 31.2321 51.3732 31.0289 51.6086 cv
30.9085 51.747 30.8627 51.9366 30.9078 52.114 cv
cp
f
35.4012 23.8771 mo
35.3862 22.7692 35.3781 21.6432 35.5262 20.5424 cv
35.5648 20.254 35.3616 19.9873 35.0722 19.9487 cv
34.8398 19.9174 34.6143 20.0431 34.5188 20.2572 cv
34.2995 20.7509 34.1818 21.2863 34.105 21.8192 cv
34.006 22.5044 33.9792 23.1997 33.9843 23.8917 cv
33.9869 24.2827 34.3066 24.598 34.6976 24.5954 cv
35.0896 24.5918 35.4039 24.2731 35.4013 23.8811 cv
35.4013 23.8801 35.4012 23.8781 35.4012 23.8771 cv
cp
34.1902 27.6315 mo
34.1902 27.6315 li
34.2418 28.0269 34.6041 28.3057 34.9985 28.2541 cv
35.3939 28.2025 35.6727 27.8402 35.6211 27.4458 cv
35.62 27.4438 35.62 27.4418 35.62 27.4398 cv
35.4562 26.2616 35.4171 25.065 35.4012 23.8771 cv
35.3957 23.4862 35.075 23.1729 34.683 23.1775 cv
34.294 23.183 33.9807 23.5017 33.9843 23.8917 cv
33.9929 25.1387 34.0296 26.3933 34.1902 27.6315 cv
cp
34.1902 27.6315 mo
34.3099 28.5452 34.4755 29.4533 34.708 30.3456 cv
34.8085 30.7305 35.2022 30.9619 35.5871 30.8614 cv
35.9699 30.7609 36.2004 30.3722 36.1049 29.9893 cv
35.8951 29.1497 35.739 28.2964 35.62 27.4398 cv
35.5654 27.0454 35.2011 26.7697 34.8067 26.8243 cv
34.4143 26.8789 34.1396 27.2391 34.1902 27.6315 cv
cp
34.708 30.3456 mo
34.953 31.2858 35.2719 32.2072 35.6235 33.1121 cv
35.7678 33.4814 36.183 33.6646 36.5523 33.5202 cv
36.9217 33.3769 37.1048 32.9607 36.9604 32.5924 cv
36.9604 32.5914 36.9604 32.5904 36.9594 32.5894 cv
36.6255 31.7403 36.3263 30.8747 36.1049 29.9893 cv
36.0084 29.6024 35.6166 29.3679 35.2307 29.4644 cv
34.8448 29.561 34.6094 29.9518 34.7059 30.3387 cv
34.7069 30.3406 34.707 30.3427 34.708 30.3456 cv
cp
35.6235 33.1121 mo
35.9555 33.9652 36.2477 34.8379 36.4522 35.7305 cv
36.5417 36.1185 36.9276 36.361 37.3156 36.2724 cv
37.7036 36.1829 37.9461 35.797 37.8565 35.4091 cv
37.6362 34.4466 37.3212 33.5072 36.9594 32.5894 cv
36.8151 32.2211 36.3979 32.0399 36.0296 32.1843 cv
35.6623 32.3296 35.4801 32.7437 35.6235 33.1121 cv
cp
36.4522 35.7305 mo
36.6608 36.6371 36.9423 37.5259 37.2755 38.394 cv
37.4199 38.7674 37.8391 38.9545 38.2124 38.8111 cv
38.5867 38.6667 38.7728 38.2475 38.6295 37.8741 cv
38.6284 37.8722 38.6284 37.8712 38.6274 37.8692 cv
38.314 37.0688 38.0493 36.2469 37.8565 35.4091 cv
37.768 35.0211 37.3811 34.7786 36.9931 34.8681 cv
36.6061 34.9567 36.3637 35.3435 36.4522 35.7305 cv
cp
37.2755 38.394 mo
37.5591 39.1308 37.8497 39.8644 38.1752 40.5836 cv
38.3405 40.9467 38.7684 41.1077 39.1315 40.9435 cv
39.4906 40.7802 39.6526 40.3593 39.4954 39.9981 cv
39.1911 39.2946 38.9068 38.5829 38.6274 37.8692 cv
38.482 37.4969 38.0609 37.3128 37.6885 37.4591 cv
37.3172 37.6045 37.1331 38.0217 37.2755 38.394 cv
cp
38.1752 40.5836 mo
38.4452 41.1775 38.6763 41.7888 38.8876 42.4054 cv
39.016 42.7809 39.4233 42.9802 39.7989 42.8528 cv
40.1734 42.7243 40.3736 42.316 40.2452 41.9415 cv
40.2452 41.9395 40.2442 41.9385 40.2442 41.9375 cv
40.0165 41.2831 39.7719 40.6339 39.4954 39.9981 cv
39.3371 39.632 38.9121 39.4639 38.5459 39.6222 cv
38.1798 39.7815 38.0117 40.2065 38.1711 40.5727 cv
38.1721 40.5757 38.1741 40.5797 38.1752 40.5836 cv
cp
38.8876 42.4054 mo
39.0999 43.0269 39.3321 43.6453 39.623 44.2349 cv
39.7993 44.5909 40.231 44.7378 40.588 44.5616 cv
40.9449 44.3854 41.0909 43.9537 40.9147 43.5967 cv
40.6514 43.0618 40.4398 42.5002 40.2442 41.9375 cv
40.1138 41.563 39.7054 41.3658 39.3309 41.4962 cv
38.9574 41.6255 38.7602 42.0319 38.8876 42.4054 cv
cp
39.623 44.2349 mo
39.8894 44.7738 40.1319 45.324 40.3673 45.8773 cv
40.5226 46.2425 40.9447 46.4125 41.3099 46.2572 cv
41.6731 46.102 41.8431 45.6819 41.6899 45.3177 cv
41.4461 44.7375 41.1933 44.1605 40.9147 43.5967 cv
40.7385 43.2397 40.3067 43.0938 39.9508 43.27 cv
39.5938 43.4462 39.4469 43.8779 39.623 44.2349 cv
cp
40.3673 45.8773 mo
40.6471 46.534 40.9696 47.1733 41.3507 47.7769 cv
41.5647 48.1164 42.0139 48.2181 42.3534 48.0041 cv
42.6929 47.7891 42.7946 47.3399 42.5807 47.0004 cv
42.5776 46.9954 42.5745 46.9905 42.5705 46.9855 cv
42.2223 46.4616 41.9337 45.8979 41.6899 45.3177 cv
41.5366 44.9525 41.1155 44.7804 40.7503 44.9347 cv
40.3841 45.088 40.213 45.5091 40.3663 45.8743 cv
40.3663 45.8753 40.3673 45.8763 40.3673 45.8773 cv
cp
41.3507 47.7769 mo
41.476 47.9754 41.5944 48.182 41.685 48.399 cv
41.7333 48.5154 41.7808 48.6389 41.7923 48.7647 cv
41.8302 49.1813 42.1988 49.488 42.6154 49.4501 cv
43.032 49.4123 43.3387 49.0436 43.3008 48.627 cv
43.2986 48.6091 43.2963 48.5911 43.2941 48.5731 cv
43.1984 47.9962 42.8901 47.4648 42.5705 46.9855 cv
42.3485 46.6511 41.8965 46.5604 41.562 46.7833 cv
41.2336 47.0022 41.1397 47.4423 41.3507 47.7769 cv
cp
41.7923 48.7647 mo
41.8084 48.9466 41.8255 49.1284 41.8417 49.3092 cv
41.8807 49.7368 42.2594 50.0514 42.687 50.0123 cv
43.1145 49.9733 43.4291 49.5946 43.3901 49.168 cv
43.3879 49.1491 43.3857 49.1311 43.3824 49.1121 cv
43.3533 48.9325 43.3232 48.7528 43.2941 48.5731 cv
43.2253 48.1599 42.836 47.8805 42.4228 47.9483 cv
42.0315 48.0129 41.7556 48.3691 41.7923 48.7647 cv
cp
43.3315 49.5417 mo
43.348 49.5026 43.3615 49.4614 43.373 49.4203 cv
43.4802 49.004 43.2312 48.5799 42.8149 48.4717 cv
42.3986 48.3636 41.9735 48.6136 41.8664 49.0289 cv
41.8644 49.0349 41.8635 49.0399 41.8616 49.045 cv
41.8521 49.0861 41.8456 49.1292 41.842 49.1712 cv
41.804 49.5987 42.1205 49.976 42.5479 50.013 cv
42.8843 50.042 43.2001 49.8513 43.3315 49.5417 cv
cp
43.3977 49.2169 mo
43.3956 49.037 43.3464 48.8525 43.3123 48.6769 cv
43.2431 48.3157 43.1709 47.9555 43.0986 47.5944 cv
43.0434 47.32 42.7773 47.1421 42.502 47.1973 cv
42.2974 47.2377 42.1393 47.4006 42.1027 47.606 cv
42.0389 47.9678 41.9752 48.3306 41.9145 48.6933 cv
41.8845 48.8697 41.8387 49.0552 41.8408 49.2352 cv
41.8468 49.6652 42.1999 50.009 42.6299 50.003 cv
43.0588 49.998 43.4017 49.6459 43.3977 49.2169 cv
cp
f
38.1725 45.8982 mo
38.5529 46.6118 39.145 47.2089 39.882 47.5503 cv
40.3083 47.7483 40.8152 47.5634 41.0132 47.136 cv
41.2102 46.7107 41.0273 46.2068 40.6029 46.0068 cv
40.0609 45.7521 39.5414 45.4492 39.0454 45.113 cv
38.7682 44.9262 38.393 44.9986 38.2052 45.2748 cv
38.0804 45.4603 38.0672 45.7005 38.1725 45.8982 cv
cp
39.883 47.5513 mo
40.1515 47.6752 40.3709 47.8826 40.5447 48.1196 cv
40.8232 48.4963 41.3551 48.5771 41.7319 48.2987 cv
42.1096 48.0202 42.1904 47.4893 41.912 47.1125 cv
41.5695 46.6465 41.1289 46.2546 40.604 46.0078 cv
40.1786 45.8067 39.6707 45.9887 39.4697 46.4141 cv
39.2686 46.8394 39.4516 47.3474 39.877 47.5484 cv
39.879 47.5493 39.881 47.5503 39.883 47.5513 cv
cp
40.5447 48.1196 mo
40.8079 48.4755 41.0116 48.8731 41.1774 49.2832 cv
41.3525 49.7162 41.8449 49.9254 42.2779 49.7514 cv
42.7089 49.5773 42.9192 49.0878 42.7481 48.6558 cv
42.5327 48.1103 42.2605 47.5844 41.912 47.1125 cv
41.6346 46.7347 41.1026 46.654 40.7248 46.9314 cv
40.348 47.2098 40.2672 47.7408 40.5447 48.1186 cv
40.5447 48.1186 40.5447 48.1186 40.5447 48.1196 cv
cp
41.1774 49.2832 mo
41.2526 49.4704 41.3318 49.6574 41.4279 49.8353 cv
41.621 50.1891 41.9453 50.4643 42.3778 50.4192 cv
42.4347 50.4136 42.4916 50.4019 42.5464 50.3853 cv
42.6002 50.3686 42.6519 50.346 42.7016 50.3194 cv
42.9262 50.1958 43.0827 49.981 43.1408 49.7332 cv
43.217 49.4133 43.0991 49.0797 42.8407 48.8777 cv
42.8079 48.8041 42.778 48.7304 42.7481 48.6558 cv
42.576 48.2208 42.0855 48.0085 41.6505 48.1806 cv
41.2165 48.3517 41.0032 48.8432 41.1753 49.2773 cv
41.1763 49.2792 41.1764 49.2813 41.1774 49.2832 cv
cp
43.1408 49.7332 mo
43.2218 49.3913 43.3028 49.0483 43.3838 48.7063 cv
43.4885 48.2601 43.2123 47.8133 42.766 47.7075 cv
42.3258 47.6037 41.8839 47.8719 41.771 48.3092 cv
41.684 48.6493 41.597 48.9903 41.5089 49.3304 cv
41.3932 49.7797 41.6636 50.2386 42.114 50.3543 cv
42.5634 50.4701 43.0212 50.1987 43.137 49.7493 cv
43.1389 49.7443 43.1398 49.7383 43.1408 49.7332 cv
cp
43.3838 48.7063 mo
43.5552 47.9783 43.6194 47.2275 43.6507 46.4821 cv
43.6693 46.0248 43.3148 45.6389 42.8575 45.6193 cv
42.4003 45.6007 42.0144 45.9562 41.9958 46.4125 cv
41.9948 46.4155 41.9949 46.4185 41.9949 46.4215 cv
41.9753 47.0527 41.9298 47.6953 41.771 48.3092 cv
41.6572 48.7536 41.9245 49.2055 42.3689 49.3193 cv
42.8133 49.4341 43.2651 49.1667 43.3789 48.7224 cv
43.3809 48.7174 43.3818 48.7124 43.3838 48.7063 cv
cp
43.6507 46.4801 mo
43.6699 45.9878 43.7011 45.4914 43.7874 45.0054 cv
43.8306 44.7649 43.8815 44.5013 44.01 44.2897 cv
44.17 44.0269 44.0859 43.6838 43.8231 43.5239 cv
43.681 43.4375 43.5068 43.4196 43.3504 43.4744 cv
42.8524 43.6493 42.5229 44.1111 42.3293 44.5815 cv
42.0921 45.1602 42.0156 45.7992 41.9949 46.4195 cv
41.9802 46.8767 42.3387 47.2595 42.796 47.2751 cv
43.2502 47.2898 43.632 46.9353 43.6507 46.4801 cv
cp
f
63.3928 8.57016 mo
64.1723 8.01401 64.9609 7.46774 65.7832 6.97607 cv
66.0464 6.81796 66.1314 6.47696 65.9743 6.21378 cv
65.8529 6.01218 65.6197 5.90891 65.3892 5.95462 cv
64.3446 6.16187 63.3779 6.70224 62.5047 7.29352 cv
62.1495 7.53467 62.0562 8.01779 62.2974 8.37299 cv
62.5385 8.72919 63.0217 8.82153 63.3779 8.58035 cv
63.3828 8.5773 63.3878 8.57422 63.3928 8.57016 cv
cp
61.5731 9.97458 mo
61.7738 9.78122 61.9958 9.60861 62.2159 9.43802 cv
62.6014 9.1395 62.996 8.85284 63.3928 8.57016 cv
63.7429 8.32104 63.8232 7.83508 63.5741 7.48599 cv
63.329 7.14185 62.854 7.0564 62.5047 7.29352 cv
62.084 7.57846 61.6654 7.86838 61.256 8.1712 cv
60.9843 8.37238 60.7117 8.57761 60.4644 8.80951 cv
60.1399 9.11234 60.1229 9.62155 60.4257 9.94604 cv
60.7295 10.2705 61.2387 10.2875 61.5632 9.98471 cv
61.5662 9.98166 61.5701 9.97861 61.5731 9.97458 cv
cp
60.197 11.9338 mo
60.4758 11.4875 60.7586 11.0432 61.0636 10.6146 cv
61.22 10.3947 61.3783 10.1639 61.5731 9.97458 cv
61.8925 9.66583 61.9005 9.15671 61.5918 8.83731 cv
61.287 8.52185 60.7849 8.50974 60.4644 8.80951 cv
60.1923 9.06372 59.9649 9.36639 59.7464 9.66599 cv
59.4166 10.1179 59.1091 10.5855 58.8066 11.0561 cv
58.5621 11.439 58.674 11.9477 59.0569 12.1922 cv
59.4388 12.4367 59.9475 12.3248 60.1921 11.9429 cv
60.194 11.9399 60.196 11.9368 60.197 11.9338 cv
cp
58.513 14.7597 mo
59.0478 13.8024 59.6178 12.8647 60.197 11.9338 cv
60.4375 11.549 60.3195 11.0414 59.9347 10.8018 cv
59.5519 10.5643 59.0502 10.6772 58.8066 11.0561 cv
58.2007 12.0042 57.6068 12.9612 57.0553 13.9418 cv
56.829 14.3445 56.972 14.8538 57.3737 15.0801 cv
57.7763 15.3064 58.2857 15.1634 58.512 14.7607 cv
58.513 14.7607 58.513 14.7597 58.513 14.7597 cv
cp
57.3827 17.3861 mo
57.6851 16.4815 58.0477 15.5923 58.513 14.7597 cv
58.7383 14.3561 58.5943 13.8467 58.1917 13.6224 cv
57.789 13.3972 57.2806 13.5401 57.0553 13.9418 cv
56.5351 14.8659 56.1296 15.8517 55.7964 16.8577 cv
55.6505 17.2954 55.8881 17.7687 56.3258 17.9146 cv
56.7635 18.0594 57.2368 17.8229 57.3827 17.3861 cv
cp
56.3276 20.2847 mo
56.7104 19.3301 57.0571 18.361 57.3827 17.3861 cv
57.5286 16.9474 57.292 16.4742 56.8543 16.3283 cv
56.4165 16.1814 55.9433 16.418 55.7964 16.8557 cv
55.7964 16.8567 55.7964 16.8567 55.7964 16.8577 cv
55.4825 17.8015 55.1484 18.7394 54.7782 19.6638 cv
54.6062 20.0919 54.8139 20.5775 55.242 20.7484 cv
55.67 20.9204 56.1556 20.7127 56.3276 20.2847 cv
cp
55.5203 22.8243 mo
55.7292 21.9598 55.9973 21.1096 56.3276 20.2847 cv
56.4986 19.8567 56.2909 19.3711 55.8629 19.1991 cv
55.4358 19.0281 54.9492 19.2358 54.7782 19.6638 cv
54.4197 20.5591 54.1194 21.4776 53.8754 22.4116 cv
53.7567 22.864 54.0281 23.3278 54.4815 23.4465 cv
54.9349 23.5642 55.3978 23.2938 55.5165 22.8404 cv
55.5174 22.8353 55.5194 22.8293 55.5203 22.8243 cv
cp
55.2377 28.493 mo
55.2314 27.271 55.2371 26.0468 55.3008 24.826 cv
55.335 24.1616 55.3639 23.4742 55.5203 22.8243 cv
55.63 22.369 55.3496 21.9113 54.8943 21.8016 cv
54.445 21.6928 53.9921 21.9642 53.8754 22.4116 cv
53.6792 23.1629 53.6285 23.9576 53.5825 24.7301 cv
53.5082 25.9851 53.496 27.2433 53.4987 28.5003 cv
53.4993 28.9804 53.8899 29.3688 54.3699 29.3682 cv
54.851 29.3676 55.2394 28.977 55.2378 28.496 cv
55.2378 28.496 55.2377 28.494 55.2377 28.493 cv
cp
53.7356 34.4639 mo
53.7356 34.4639 li
53.8132 34.9431 54.2651 35.2688 54.7442 35.1912 cv
55.2233 35.1125 55.549 34.6607 55.4714 34.1816 cv
55.4704 34.1816 55.4704 34.1806 55.4704 34.1806 cv
55.3616 33.5178 55.3396 32.837 55.3108 32.1673 cv
55.2594 30.9428 55.2451 29.718 55.2377 28.493 cv
55.2351 28.013 54.8435 27.6255 54.3636 27.6292 cv
53.8846 27.6318 53.4981 28.0213 53.4987 28.5003 cv
53.5013 29.7464 53.5119 30.9923 53.5605 32.2379 cv
53.5892 32.9796 53.616 33.7303 53.7356 34.4639 cv
cp
53.7356 34.4639 mo
53.8671 35.2734 53.9836 36.0851 54.0762 36.8991 cv
54.1308 37.3835 54.568 37.7324 55.0523 37.6777 cv
55.5367 37.623 55.8856 37.1859 55.8309 36.7005 cv
55.8299 36.6995 55.8299 36.6985 55.8299 36.6965 cv
55.731 35.8556 55.6082 35.016 55.4704 34.1806 cv
55.3918 33.7015 54.9389 33.3768 54.4608 33.4554 cv
53.9817 33.535 53.658 33.9858 53.7356 34.4639 cv
cp
54.0762 36.8991 mo
54.1477 37.5393 54.2333 38.1913 54.4226 38.8091 cv
54.5651 39.2775 55.0602 39.5407 55.5285 39.3972 cv
55.9959 39.2547 56.2601 38.7586 56.1166 38.2913 cv
56.1166 38.2903 li
55.9586 37.7761 55.8932 37.2298 55.8299 36.6965 cv
55.7732 36.2122 55.3341 35.8663 54.8498 35.923 cv
54.3674 35.9796 54.0215 36.4157 54.0762 36.8991 cv
cp
54.4226 38.8091 mo
54.4902 39.0304 54.5249 39.264 54.5576 39.4926 cv
54.6143 39.89 54.6499 40.2896 54.6796 40.6892 cv
54.7173 41.1778 55.1427 41.5439 55.6302 41.5072 cv
56.1189 41.4704 56.4849 41.0451 56.4482 40.5565 cv
56.3913 39.8031 56.3391 39.0167 56.1166 38.2903 cv
55.9731 37.8229 55.477 37.5597 55.0096 37.7032 cv
54.5423 37.8467 54.2791 38.3418 54.4226 38.8091 cv
cp
54.6796 40.6892 mo
54.7565 41.7044 54.9014 42.7138 55.117 43.7083 cv
55.2216 44.1891 55.6953 44.4936 56.1761 44.3899 cv
56.6569 44.2853 56.9623 43.8117 56.8577 43.3309 cv
56.8577 43.3289 56.8577 43.3279 56.8567 43.3259 cv
56.654 42.4142 56.5181 41.4878 56.4482 40.5565 cv
56.4114 40.0679 55.9851 39.7019 55.4975 39.7386 cv
55.0089 39.7753 54.6439 40.2016 54.6796 40.6892 cv
cp
55.117 43.7083 mo
55.2735 44.4275 55.428 45.1588 55.6732 45.8549 cv
55.8388 46.328 56.3577 46.5769 56.8308 46.4104 cv
57.3049 46.2438 57.5538 45.7259 57.3872 45.2518 cv
57.3831 45.2398 57.378 45.2269 57.3728 45.215 cv
57.1317 44.6118 56.9971 43.9583 56.8567 43.3259 cv
56.75 42.8461 56.2744 42.5437 55.7947 42.6503 cv
55.3159 42.7559 55.0134 43.2295 55.117 43.7083 cv
cp
55.6732 45.8549 mo
55.8501 46.3599 56.2256 46.9915 56.8557 46.9121 cv
56.9725 46.8978 57.083 46.8555 57.1803 46.7903 cv
57.7071 46.4341 57.5727 45.7126 57.3728 45.215 cv
57.1863 44.7491 56.6577 44.5233 56.1918 44.7098 cv
55.7399 44.8911 55.5118 45.3958 55.6732 45.8549 cv
cp
f
52.319 42.8908 mo
53.0905 43.1838 53.8484 43.512 54.5936 43.8653 cv
55.0421 44.078 55.5779 43.8867 55.7906 43.4382 cv
56.0034 42.9897 55.8121 42.4539 55.3636 42.2411 cv
55.3576 42.2392 55.3525 42.2363 55.3465 42.2343 cv
54.4507 41.8308 53.4574 41.6394 52.4764 41.7319 cv
52.1458 41.7628 51.9032 42.0557 51.9351 42.3863 cv
51.9568 42.6141 52.105 42.8094 52.319 42.8908 cv
cp
54.5895 43.8633 mo
54.9707 44.0468 55.2111 44.4181 55.3715 44.7962 cv
55.569 45.2619 56.1056 45.4786 56.5703 45.2812 cv
57.035 45.0837 57.2517 44.5471 57.0553 44.0824 cv
57.0543 44.0814 57.0543 44.0804 57.0542 44.0794 cv
56.7139 43.2854 56.1447 42.587 55.3425 42.2324 cv
54.8891 42.0307 54.3575 42.2359 54.1568 42.6893 cv
53.96 43.1336 54.1521 43.6534 54.5895 43.8633 cv
cp
55.3715 44.7962 mo
55.5854 45.3007 55.7905 45.8174 55.9158 46.3519 cv
56.0306 46.8436 56.5222 47.1489 57.0139 47.0341 cv
57.5035 46.9203 57.8088 46.4317 57.6971 45.941 cv
57.5506 45.3007 57.3123 44.6824 57.0542 44.0794 cv
56.8548 43.6158 56.3172 43.401 55.8535 43.5995 cv
55.3908 43.7979 55.1751 44.3335 55.3715 44.7962 cv
cp
55.9158 46.3519 mo
56.0116 46.7628 56.1196 47.1866 56.319 47.5612 cv
56.5542 48.0025 57.1032 48.1701 57.5454 47.9349 cv
57.9768 47.7048 58.1486 47.1738 57.9324 46.7343 cv
57.8125 46.4907 57.7572 46.2043 57.6971 45.941 cv
57.5843 45.4493 57.0947 45.141 56.603 45.2528 cv
56.1103 45.3656 55.802 45.8552 55.9147 46.3469 cv
55.9148 46.3489 55.9148 46.3509 55.9158 46.3519 cv
cp
56.319 47.5612 mo
56.6186 48.1238 57.3792 48.2589 57.843 47.8114 cv
57.9933 47.6656 58.0922 47.4805 58.1699 47.2885 cv
58.3351 46.8766 58.438 46.4374 58.5409 46.0061 cv
58.6562 45.5218 58.3575 45.0362 57.8731 44.9209 cv
57.3888 44.8056 56.9022 45.1043 56.7869 45.5887 cv
56.7212 45.8675 56.6524 46.1453 56.5646 46.4183 cv
56.5646 46.4173 li
56.2148 46.6874 56.1114 47.1707 56.319 47.5612 cv
cp
58.5409 46.0061 mo
58.7525 45.1176 58.9581 44.2261 59.1145 43.3253 cv
59.2007 42.8322 58.8702 42.363 58.3772 42.2768 cv
57.8842 42.1906 57.415 42.5211 57.3288 43.0142 cv
57.3288 43.0172 57.3278 43.0192 57.3279 43.0222 cv
57.185 43.8849 56.989 44.7392 56.7869 45.5887 cv
56.6716 46.073 56.9713 46.5596 57.4557 46.6749 cv
57.9391 46.7892 58.4256 46.4905 58.5409 46.0061 cv
cp
59.1145 43.3253 mo
59.167 43.0236 59.2566 42.6485 59.5072 42.4446 cv
59.9044 42.1199 59.9636 41.5342 59.6389 41.136 cv
59.3142 40.7387 58.7285 40.6796 58.3303 41.0043 cv
58.3174 41.0154 58.3055 41.0256 58.2927 41.0367 cv
57.7296 41.5504 57.4492 42.2857 57.3279 43.0222 cv
57.2456 43.5161 57.5801 43.9823 58.0741 44.0645 cv
58.5651 44.1447 59.0293 43.8153 59.1145 43.3253 cv
cp
59.5122 42.4395 mo
59.9282 42.0946 60.2314 41.6041 60.253 41.0548 cv
60.2723 40.5725 60.064 40.1169 59.7211 39.7839 cv
59.4773 39.5468 59.0873 39.5523 58.8502 39.7961 cv
58.7286 39.9216 58.6656 40.0923 58.6767 40.2672 cv
58.6985 40.5959 58.5371 40.8188 58.2986 41.0317 cv
57.9166 41.3742 57.8835 41.9626 58.226 42.3446 cv
58.5594 42.7167 59.1279 42.7591 59.5122 42.4395 cv
cp
f
100.983 9.95761 mo
101.68 9.66943 102.365 9.35739 103.038 9.01749 cv
103.45 8.80966 103.615 8.30768 103.408 7.89609 cv
103.2 7.4845 102.698 7.31937 102.286 7.52719 cv
102.285 7.52722 li
101.649 7.84869 101.002 8.14731 100.344 8.42303 cv
99.9209 8.60098 99.7216 9.08835 99.8996 9.51129 cv
100.077 9.93225 100.561 10.1316 100.983 9.95761 cv
cp
98.8215 11.128 mo
99.5093 10.6849 100.225 10.2705 100.983 9.95761 cv
101.407 9.78265 101.609 9.29623 101.434 8.87228 cv
101.258 8.4483 100.773 8.24597 100.349 8.42197 cv
100.347 8.422 100.346 8.423 100.344 8.42303 cv
99.5 8.77792 98.6982 9.22937 97.9239 9.71347 cv
97.5317 9.95908 97.4128 10.4765 97.6584 10.8676 cv
97.903 11.2598 98.4204 11.3788 98.8126 11.1341 cv
98.8155 11.1321 98.8185 11.1301 98.8215 11.128 cv
cp
96.619 12.7209 mo
97.3193 12.1447 98.0592 11.618 98.8215 11.128 cv
99.2106 10.8774 99.3225 10.3591 99.0719 9.97101 cv
98.8244 9.5849 98.312 9.47089 97.9239 9.71347 cv
97.0978 10.2302 96.2973 10.7886 95.5415 11.4025 cv
95.1769 11.6988 95.1212 12.2345 95.4175 12.6 cv
95.7138 12.9646 96.2495 13.0203 96.6151 12.724 cv
96.616 12.723 96.617 12.722 96.619 12.7209 cv
cp
93.7508 15.3627 mo
94.6802 14.4578 95.6156 13.5457 96.619 12.7209 cv
96.9815 12.4217 97.0342 11.886 96.735 11.5225 cv
96.4377 11.1609 95.9051 11.1072 95.5415 11.4025 cv
94.4954 12.2528 93.5234 13.1982 92.5574 14.1376 cv
92.2192 14.4676 92.2126 15.0087 92.5415 15.3469 cv
92.8705 15.6851 93.4126 15.6927 93.7508 15.3627 cv
cp
90.8414 18.248 mo
91.795 17.2697 92.7719 16.3163 93.7508 15.3627 cv
94.089 15.0337 94.0966 14.4926 93.7666 14.1544 cv
93.4377 13.8153 92.8955 13.8086 92.5574 14.1376 cv
91.5686 15.1013 90.5799 16.0669 89.6184 17.0573 cv
89.2903 17.3961 89.2987 17.936 89.6365 18.2641 cv
89.9744 18.5912 90.5134 18.5848 90.8414 18.248 cv
cp
88.4648 20.937 mo
89.2271 20.016 90.0054 19.1038 90.8414 18.248 cv
91.1705 17.9101 91.1642 17.3701 90.8263 17.0411 cv
90.4894 16.712 89.9495 16.7193 89.6204 17.0562 cv
89.6194 17.0562 89.6194 17.0572 89.6184 17.0573 cv
88.7528 17.9494 87.9449 18.896 87.154 19.8533 cv
86.8542 20.2148 86.9055 20.7513 87.2671 21.05 cv
87.6296 21.3498 88.165 21.2985 88.4648 20.937 cv
cp
85.7347 24.3562 mo
86.6252 23.2007 87.5349 22.061 88.4648 20.937 cv
88.7646 20.5755 88.7133 20.039 88.3517 19.7393 cv
87.9892 19.4395 87.4538 19.4908 87.154 19.8523 cv
87.154 19.8533 li
86.2123 20.9914 85.2888 22.1443 84.3834 23.311 cv
84.0937 23.6834 84.161 24.2196 84.5334 24.5093 cv
84.9059 24.799 85.4431 24.7316 85.7327 24.3592 cv
85.7337 24.3582 85.7337 24.3572 85.7347 24.3562 cv
cp
83.3073 27.8379 mo
84.0583 26.639 84.8718 25.4774 85.7347 24.3562 cv
86.0233 23.9818 85.953 23.4456 85.5797 23.1579 cv
85.2063 22.8703 84.672 22.9386 84.3834 23.311 cv
83.4829 24.4696 82.6288 25.6657 81.8303 26.8981 cv
81.568 27.3032 81.6833 27.8449 82.0894 28.1082 cv
82.4955 28.3714 83.0372 28.255 83.3005 27.8499 cv
83.3025 27.8459 83.3044 27.8419 83.3073 27.8379 cv
cp
81.0468 31.7296 mo
81.7624 30.4111 82.5102 29.1093 83.3073 27.8379 cv
83.5636 27.4288 83.4402 26.8882 83.0302 26.632 cv
82.6252 26.3778 82.0905 26.496 81.8303 26.8981 cv
80.9924 28.192 80.2149 29.5242 79.4798 30.8799 cv
79.2448 31.3127 79.4062 31.8538 79.839 32.0888 cv
80.2717 32.3227 80.8129 32.1624 81.0468 31.7296 cv
cp
79.3468 35.2337 mo
79.8297 34.029 80.4291 32.8699 81.0468 31.7296 cv
81.2818 31.2968 81.1214 30.7556 80.6886 30.5207 cv
80.2559 30.2868 79.7147 30.4471 79.4798 30.8799 cv
78.8278 32.0816 78.2001 33.304 77.696 34.575 cv
77.5143 35.0312 77.7374 35.5486 78.1935 35.7293 cv
78.6487 35.9099 79.1641 35.6889 79.3468 35.2337 cv
cp
78.2288 38.141 mo
78.5874 37.1667 78.9601 36.1973 79.3468 35.2337 cv
79.5294 34.7786 79.3084 34.2611 78.8522 34.0785 cv
78.397 33.8958 77.8796 34.1169 77.6969 34.573 cv
77.696 34.573 77.696 34.574 77.696 34.575 cv
77.3074 35.5526 76.9279 36.5341 76.5584 37.5186 cv
76.3848 37.9796 76.6178 38.4939 77.0789 38.6665 cv
77.5399 38.8401 78.0532 38.6071 78.2268 38.146 cv
78.2278 38.144 78.2278 38.143 78.2288 38.141 cv
cp
77.0965 41.3685 mo
77.4599 40.2871 77.8343 39.2107 78.2288 38.141 cv
78.3994 37.679 78.1624 37.1667 77.7003 36.9961 cv
77.2403 36.8265 76.73 37.0605 76.5584 37.5186 cv
76.1501 38.6034 75.7669 39.6979 75.3967 40.7964 cv
75.2382 41.2652 75.4912 41.7743 75.9601 41.9328 cv
76.43 42.0903 76.939 41.8373 77.0965 41.3685 cv
cp
76.2021 44.4101 mo
76.4461 43.3812 76.7603 42.3695 77.0965 41.3685 cv
77.255 40.8986 77.0021 40.3905 76.5322 40.232 cv
76.0633 40.0745 75.5542 40.3265 75.3967 40.7964 cv
75.0421 41.8506 74.7135 42.9165 74.4612 44.0005 cv
74.3488 44.4809 74.6475 44.9614 75.1288 45.0738 cv
75.6082 45.1852 76.0877 44.8885 76.2021 44.4101 cv
cp
75.6675 47.5146 mo
75.7983 46.473 75.9591 45.432 76.2021 44.4101 cv
76.3155 43.9298 76.0188 43.4472 75.5385 43.3339 cv
75.0581 43.2195 74.5765 43.5161 74.4622 43.9965 cv
74.4622 43.9975 74.4612 43.9985 74.4612 44.0005 cv
74.2089 45.0815 74.0287 46.1787 73.8756 47.2786 cv
73.8074 47.7724 74.1528 48.2294 74.6466 48.2976 cv
75.1414 48.3668 75.5974 48.0215 75.6666 47.5266 cv
75.6666 47.5226 75.6675 47.5186 75.6675 47.5146 cv
cp
75.4638 51.2142 mo
75.4503 49.9783 75.5148 48.7415 75.6675 47.5146 cv
75.7297 47.0198 75.3784 46.5679 74.8836 46.5057 cv
74.3929 46.4445 73.9439 46.7888 73.8756 47.2786 cv
73.6939 48.5878 73.6154 49.9108 73.6279 51.2327 cv
73.6319 51.7397 74.0467 52.1469 74.5536 52.1419 cv
75.0606 52.138 75.4678 51.7232 75.4638 51.2162 cv
75.4638 51.2152 75.4638 51.2152 75.4638 51.2142 cv
cp
75.4643 53.9814 mo
75.4884 53.059 75.4736 52.1361 75.4638 51.2142 cv
75.4579 50.7072 75.0421 50.3011 74.5351 50.306 cv
74.0292 50.312 73.623 50.7267 73.6279 51.2327 cv
73.6355 52.1327 73.649 53.0346 73.6276 53.9349 cv
73.6145 54.4421 74.0155 54.8634 74.5237 54.8764 cv
75.0309 54.8885 75.4512 54.4875 75.4643 53.9814 cv
cp
75.3606 55.2086 mo
75.45 54.8096 75.454 54.3875 75.4643 53.9814 cv
75.4773 53.4732 75.0763 53.0518 74.5692 53.0388 cv
74.062 53.0257 73.6396 53.4267 73.6276 53.9339 cv
73.6276 53.9349 li
73.62 54.227 73.6115 54.5201 73.5478 54.8059 cv
73.4356 55.3062 73.7515 55.8026 74.2528 55.9137 cv
74.7532 56.0258 75.2495 55.71 75.3606 55.2086 cv
cp
74.0411 56.0262 mo
74.0411 56.0262 li
74.1276 56.0662 74.2219 56.0901 74.317 56.0979 cv
74.8525 56.1417 75.2533 55.6929 75.3606 55.2086 cv
75.4728 54.7083 75.1569 54.212 74.6556 54.1009 cv
74.1803 53.9944 73.7046 54.274 73.564 54.7397 cv
73.4216 55.2154 73.5525 55.8029 74.0411 56.0262 cv
cp
f
70.5762 50.7384 mo
71.1953 51.6032 71.8019 52.5001 72.2423 53.472 cv
72.4363 53.8978 72.9385 54.0869 73.3643 53.8939 cv
73.7911 53.7009 73.9792 53.1977 73.7862 52.7719 cv
73.7852 52.7699 73.7841 52.7679 73.7831 52.7649 cv
73.267 51.6519 72.3692 50.7354 71.4558 49.939 cv
71.2063 49.722 70.8286 49.7474 70.6115 49.9969 cv
70.4289 50.2061 70.4145 50.5133 70.5762 50.7384 cv
cp
72.2423 53.47 mo
72.4794 53.9953 72.6469 54.5504 72.7695 55.1119 cv
72.87 55.5728 73.3254 55.8645 73.7852 55.7641 cv
74.2461 55.6637 74.5378 55.2082 74.4374 54.7484 cv
74.4374 54.7474 74.4374 54.7474 74.4374 54.7474 cv
74.2874 54.0661 74.0775 53.3965 73.7831 52.7639 cv
73.5851 52.3402 73.0809 52.1561 72.6562 52.3541 cv
72.2355 52.55 72.0513 53.0472 72.2423 53.47 cv
cp
72.7695 55.1119 mo
72.8351 55.4142 72.9076 55.7154 73.007 56.0082 cv
73.092 56.2603 73.198 56.515 73.3784 56.7149 cv
73.6904 57.0613 74.2248 57.088 74.5702 56.7759 cv
74.8987 56.4791 74.9428 55.9795 74.6707 55.6307 cv
74.687 55.6515 74.7065 55.6913 74.6859 55.6445 cv
74.6623 55.5898 74.6426 55.533 74.6239 55.4762 cv
74.5481 55.2371 74.4912 54.9918 74.4374 54.7474 cv
74.336 54.2865 73.8805 53.9949 73.4207 54.0963 cv
72.9608 54.1977 72.6692 54.6521 72.7695 55.1119 cv
cp
73.3784 56.7149 mo
73.6935 57.0642 74.214 57.1051 74.5991 56.8526 cv
74.7539 56.7518 74.8823 56.6143 74.9956 56.4689 cv
75.2705 56.1177 75.4908 55.7211 75.7043 55.3306 cv
75.9295 54.9209 75.7794 54.4056 75.3698 54.1814 cv
74.9591 53.9562 74.4449 54.1063 74.2196 54.5159 cv
74.2177 54.52 74.2157 54.524 74.2138 54.528 cv
74.0651 54.8087 73.9134 55.0895 73.7334 55.3517 cv
73.7334 55.3507 li
73.2921 55.5009 73.0557 55.9796 73.2059 56.4209 cv
73.2432 56.5295 73.3014 56.6298 73.3784 56.7149 cv
cp
75.7043 55.3306 mo
76.1312 54.5545 76.6164 53.7968 77.2177 53.1427 cv
77.5515 52.7808 77.5279 52.216 77.165 51.8822 cv
76.802 51.5485 76.2373 51.5721 75.9045 51.935 cv
75.8936 51.9461 75.8838 51.9583 75.8739 51.9694 cv
75.2241 52.754 74.6883 53.6294 74.2138 54.528 cv
73.9946 54.9416 74.1536 55.4538 74.5672 55.6729 cv
74.9758 55.8882 75.482 55.7362 75.7043 55.3306 cv
cp
77.2177 53.1427 mo
77.5367 52.7969 77.826 52.3935 77.9466 51.9321 cv
78.07 51.4556 77.972 50.8557 77.4891 50.6164 cv
77.1914 50.4688 76.8308 50.5901 76.6833 50.8868 cv
76.6784 50.8969 76.6735 50.907 76.6696 50.916 cv
76.6219 51.0276 76.5361 51.1286 76.4652 51.2254 cv
76.2772 51.4796 76.0761 51.726 75.8739 51.9694 cv
75.5593 52.3491 75.6119 52.9125 75.9916 53.2261 cv
76.3572 53.5288 76.8968 53.4925 77.2177 53.1427 cv
cp
f
274.458 66.8001 mo
275.726 66.3662 276.996 65.9383 278.273 65.5333 cv
279.028 65.2945 279.786 65.0536 280.556 64.8655 cv
280.932 64.7741 281.162 64.3944 281.071 64.0174 cv
280.98 63.6465 280.61 63.4158 280.237 63.4992 cv
279.431 63.6776 278.637 63.916 277.847 64.1542 cv
276.553 64.5434 275.266 64.9595 273.982 65.3806 cv
273.59 65.5102 273.376 65.9327 273.504 66.3253 cv
273.634 66.7188 274.056 66.9318 274.449 66.8032 cv
274.452 66.8022 274.455 66.8011 274.458 66.8001 cv
cp
268.136 69.0383 mo
270.221 68.2348 272.344 67.5239 274.458 66.8001 cv
274.849 66.6665 275.057 66.241 274.924 65.8496 cv
274.791 65.4621 274.372 65.253 273.982 65.3806 cv
271.841 66.0847 269.692 66.7769 267.577 67.5578 cv
267.167 67.7096 266.957 68.1641 267.109 68.5743 cv
267.26 68.9846 267.716 69.1942 268.126 69.0424 cv
268.129 69.0414 268.133 69.0403 268.136 69.0383 cv
cp
265.041 70.3377 mo
266.056 69.8667 267.092 69.4406 268.136 69.0383 cv
268.544 68.8815 268.748 68.4231 268.59 68.0159 cv
268.434 67.6117 267.984 67.408 267.577 67.5578 cv
266.493 67.9585 265.418 68.3841 264.364 68.8595 cv
263.955 69.0443 263.773 69.5255 263.957 69.9353 cv
264.142 70.3442 264.623 70.5266 265.033 70.3418 cv
265.036 70.3407 265.038 70.3397 265.041 70.3377 cv
cp
262.428 71.6324 mo
263.288 71.1773 264.16 70.747 265.041 70.3377 cv
265.448 70.1489 265.625 69.6658 265.436 69.259 cv
265.248 68.8542 264.77 68.6767 264.364 68.8595 cv
263.453 69.2702 262.552 69.7008 261.661 70.1543 cv
261.252 70.3621 261.088 70.864 261.297 71.2736 cv
261.505 71.6832 262.006 71.8463 262.417 71.6385 cv
262.42 71.6365 262.424 71.6344 262.428 71.6324 cv
cp
260.191 72.9167 mo
260.918 72.4581 261.668 72.0343 262.428 71.6324 cv
262.834 71.4166 262.989 70.9138 262.775 70.5072 cv
262.562 70.1047 262.067 69.9475 261.661 70.1543 cv
260.857 70.5627 260.064 70.994 259.292 71.4591 cv
258.886 71.7039 258.756 72.2304 259 72.6356 cv
259.244 73.0398 259.771 73.1706 260.176 72.9268 cv
260.181 72.9238 260.186 72.9207 260.191 72.9167 cv
cp
258.353 74.2063 mo
258.943 73.7453 259.558 73.3171 260.191 72.9177 cv
260.591 72.6649 260.711 72.1355 260.458 71.7355 cv
260.209 71.3413 259.691 71.2184 259.292 71.4591 cv
258.599 71.8763 257.927 72.3271 257.282 72.8157 cv
256.896 73.1083 256.82 73.6592 257.113 74.0448 cv
257.406 74.4314 257.956 74.507 258.343 74.2144 cv
258.346 74.2114 258.35 74.2093 258.353 74.2063 cv
cp
256.119 76.2136 mo
256.836 75.5172 257.565 74.8225 258.353 74.2063 cv
258.735 73.9078 258.803 73.356 258.504 72.9744 cv
258.209 72.5969 257.665 72.5262 257.282 72.8157 cv
256.436 73.4567 255.647 74.175 254.87 74.8972 cv
254.503 75.2385 254.481 75.8127 254.822 76.1798 cv
255.163 76.5468 255.737 76.5681 256.104 76.2267 cv
256.109 76.2227 256.114 76.2177 256.119 76.2136 cv
cp
253.79 78.676 mo
254.519 77.8124 255.308 77.0001 256.119 76.2136 cv
256.479 75.8643 256.487 75.2902 256.138 74.9303 cv
255.795 74.5763 255.231 74.5609 254.87 74.8972 cv
253.996 75.7084 253.146 76.5494 252.359 77.4457 cv
252.016 77.8378 252.055 78.4344 252.447 78.7778 cv
252.839 79.1212 253.435 79.0822 253.778 78.6902 cv
253.782 78.6861 253.786 78.6811 253.79 78.676 cv
cp
251.622 81.6246 mo
252.3 80.6116 253.004 79.6083 253.79 78.676 cv
254.126 78.2781 254.075 77.6826 253.677 77.3473 cv
253.284 77.0158 252.699 77.0597 252.359 77.4457 cv
251.507 78.4178 250.746 79.4688 250.014 80.5334 cv
249.711 80.976 249.823 81.5807 250.264 81.8846 cv
250.707 82.1884 251.312 82.0763 251.615 81.6337 cv
251.617 81.6307 251.619 81.6277 251.622 81.6246 cv
cp
249.364 82.7711 mo
249.364 82.7711 li
249.48 82.8928 249.629 82.9771 249.792 83.0151 cv
250.12 83.0933 250.435 82.9856 250.689 82.7796 cv
250.807 82.6842 250.912 82.572 251.011 82.4558 cv
251.234 82.1942 251.431 81.9099 251.622 81.6246 cv
251.92 81.1781 251.801 80.5754 251.355 80.2766 cv
250.913 79.9808 250.315 80.0948 250.014 80.5334 cv
249.827 80.8066 249.639 81.0808 249.458 81.358 cv
249.322 81.5676 249.167 81.7844 249.129 82.0359 cv
249.089 82.3044 249.175 82.5764 249.364 82.7711 cv
cp
f
250.321 74.0069 mo
250.751 75.0059 250.973 76.0814 251.055 77.1635 cv
251.093 77.6731 251.536 78.0549 252.046 78.0169 cv
252.557 77.9789 252.938 77.5354 252.9 77.0248 cv
252.899 77.0158 252.899 77.0068 252.898 76.9979 cv
252.758 75.6604 252.265 74.3551 251.363 73.3426 cv
251.133 73.0843 250.738 73.062 250.48 73.292 cv
250.279 73.4713 250.214 73.7591 250.321 74.0069 cv
cp
252.654 79.5859 mo
252.961 78.7612 252.994 77.8588 252.897 76.9919 cv
252.84 76.4835 252.383 76.1179 251.874 76.1748 cv
251.382 76.2296 251.021 76.6628 251.054 77.1565 cv
251.094 77.7401 251.073 78.3553 250.86 78.9069 cv
250.67 79.4011 250.917 79.9563 251.411 80.1465 cv
251.905 80.3367 252.46 80.0912 252.651 79.5969 cv
252.652 79.5929 252.653 79.5899 252.654 79.5859 cv
cp
251.832 81.3256 mo
252.163 80.7757 252.43 80.1875 252.654 79.5859 cv
252.839 79.0897 252.586 78.5376 252.089 78.3524 cv
251.597 78.1702 251.05 78.4166 250.86 78.9069 cv
250.669 79.4021 250.449 79.8878 250.181 80.3459 cv
249.914 80.8031 250.066 81.3913 250.524 81.659 cv
250.978 81.9247 251.56 81.7758 251.832 81.3256 cv
cp
252.589 81.8618 mo
252.589 81.8618 li
253.092 81.6929 253.363 81.1477 253.195 80.6446 cv
253.026 80.1416 252.481 79.8699 251.978 80.0388 cv
251.976 80.0399 251.974 80.0409 251.971 80.0409 cv
251.872 80.0751 251.772 80.1082 251.672 80.1384 cv
251.673 80.1374 li
251.29 79.7709 250.683 79.784 250.316 80.1673 cv
250.264 80.2209 250.218 80.2815 250.181 80.3459 cv
249.987 80.6772 249.902 81.0712 250.041 81.4416 cv
250.198 81.8618 250.597 82.1181 251.033 82.16 cv
251.556 82.2089 252.099 82.0255 252.589 81.8618 cv
cp
252.589 81.8618 mo
253.608 81.5198 254.646 81.2236 255.698 81.0013 cv
256.228 80.8891 256.566 80.3691 256.454 79.8394 cv
256.341 79.3097 255.821 78.9707 255.292 79.0829 cv
255.287 79.084 255.282 79.0851 255.276 79.0861 cv
254.158 79.3432 253.056 79.6692 251.971 80.0409 cv
251.47 80.2138 251.202 80.76 251.374 81.262 cv
251.546 81.762 252.088 82.0297 252.589 81.8618 cv
cp
255.7 81.0003 mo
256.721 80.7823 257.729 80.5045 258.732 80.2207 cv
260.235 79.795 261.73 79.3385 263.222 78.872 cv
263.564 78.765 263.755 78.4007 263.648 78.058 cv
263.551 77.7461 263.235 77.5547 262.913 77.6125 cv
260.364 78.0694 257.805 78.5135 255.279 79.0861 cv
254.75 79.2053 254.419 79.7302 254.538 80.2589 cv
254.658 80.7825 255.175 81.1134 255.7 81.0003 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
